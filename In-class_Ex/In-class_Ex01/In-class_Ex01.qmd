---
title: "In class exercise 1"
author: "Yang Lu"
date: "17 May 2025"
date-modified: "last-modified"
format: html
code-fold: true
code-summary: "Show the code"
editor: visual
execute: 
  eval: true  
  echo: true  
  warning: false 
  freeze: true 
---


# VAST Challenge 2025-Mini-Challenge 1



## 2.Setting up

2.1 loading packages


```{r}
pacman::p_load(
  jsonlite,
  tidyverse,
  SmartEDA,
  tidygraph,
  ggraph)
```

2.2 Loading data


```{r}
kg <- fromJSON("data/MC1_graph.json")
glimpse(kg)

```


the str() to using to overview the dataset, and getting the maximum data in whole dtaset.


```{r}
str(kg,max.level = 1)

```


```{r}
nodes_tbl <- as_tibble(kg$nodes)
edges_tbl <- as_tibble(kg$links)
```



```{r}
ggplot(data=nodes_tbl,
      aes(y=`Node Type`))+
  geom_bar()

```


## step 1  mapping from node id to row index

```{r}
id_map <-tibble(id=nodes_tbl$id,
                index=seq_len(
                  nrow(nodes_tbl)))
```

this ensure each id from your node list is mapped to the correct row number

# step 2 map source and target IDS to the row indices

```{r}
edges_tbl <- edges_tbl %>%
  left_join(id_map, by= c("source" = "id")) %>%
  rename(from = index) %>%
  left_join(id_map, by= c("target" = "id")) %>%
  rename(to = index)
```

# step 3 filter out any unmatched (invalid) edges
```{r}
edges_tbl <-edges_tbl %>%
  filter(!is.na(from),!is.na(to))

```
# step 4 creating the graph

```{r}

graph <-tbl_graph(nodes=nodes_tbl,
                  edges=edges_tbl,
                  directed=kg$directed)
```

visualising the knowledge graoh

```{r}
set.seed(1234)
```

### visualising the whole graph

```{r}
#| eval: false
ggraph(graph,layout="fr") +
  geom_edge_link(alpha=0.3,
                 colour="gray")+
  geom_node_point(aes(color="Node Type"),
                  size=4)+
  geom_node_text(aes(label=name),
                 repel = TRUE,
                 size=2.5)+
  theme_void()
```




### step 1: filter edges to only"memberOf"

```{r}
graph_memberof <-graph %>%
  activate(edges) %>%
  filter('Edge Type'=="Memberof")
```

### step 2: extract only connected nodes 

```{r}
use_node_indices <-graph_memberof %>%
  activate(edges)%>%
  as_tibble()%>%
  select(from,to)%>%
  unlist()%>%
  unique()
```


###step 3 keep only those nodes

```{r}
graph_memberof <-graph_memberof %>%
  activate(nodes)%>%
  mutate(row_id=row_number()) %>%
  filter(row_id %in% use_node_indices)%>%
  select(-row_id)

```


### plot the sub graph
```{r}
ggraph(graph_memberof,
       layout = "fr")+
  geom_edge_link(alpha=0.5,
                colour="gray")+
  geom_edge_point(aes(colour="Node Tpye"),
                  size=1)+
  geom_node_text(aes(label = name),
                 repel = TRUE,
                 size=2.5)+
  theme_void()

```

