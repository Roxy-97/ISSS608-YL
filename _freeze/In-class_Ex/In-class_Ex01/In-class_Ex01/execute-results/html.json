{
  "hash": "7dd7fd4f6576c611b46c31cb7584ab61",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"In class exercise 1\"\nauthor: \"Yang Lu\"\ndate: \"17 May 2025\"\ndate-modified: \"last-modified\"\nformat: html\ncode-fold: true\ncode-summary: \"Show the code\"\neditor: visual\nexecute: \n  eval: true  \n  echo: true  \n  warning: false \n  freeze: true \n---\n\n\n\n\n# VAST Challenge 2025-Mini-Challenge 1\n\n\n\n## 2.Setting up\n\n2.1 loading packages\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(\n  jsonlite,\n  tidyverse,\n  SmartEDA,\n  tidygraph,\n  ggraph)\n```\n:::\n\n\n\n2.2 Loading data\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkg <- fromJSON(\"data/MC1_graph.json\")\nglimpse(kg)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nList of 5\n $ directed  : logi TRUE\n $ multigraph: logi TRUE\n $ graph     :List of 2\n  ..$ node_default: Named list()\n  ..$ edge_default: Named list()\n $ nodes     :'data.frame':\t17412 obs. of  10 variables:\n  ..$ Node Type     : chr [1:17412] \"Song\" \"Person\" \"Person\" \"Person\" ...\n  ..$ name          : chr [1:17412] \"Breaking These Chains\" \"Carlos Duffy\" \"Min Qin\" \"Xiuying Xie\" ...\n  ..$ single        : logi [1:17412] TRUE NA NA NA NA FALSE ...\n  ..$ release_date  : chr [1:17412] \"2017\" NA NA NA ...\n  ..$ genre         : chr [1:17412] \"Oceanus Folk\" NA NA NA ...\n  ..$ notable       : logi [1:17412] TRUE NA NA NA NA TRUE ...\n  ..$ id            : int [1:17412] 0 1 2 3 4 5 6 7 8 9 ...\n  ..$ written_date  : chr [1:17412] NA NA NA NA ...\n  ..$ stage_name    : chr [1:17412] NA NA NA NA ...\n  ..$ notoriety_date: chr [1:17412] NA NA NA NA ...\n $ links     :'data.frame':\t37857 obs. of  4 variables:\n  ..$ Edge Type: chr [1:37857] \"InterpolatesFrom\" \"RecordedBy\" \"PerformerOf\" \"ComposerOf\" ...\n  ..$ source   : int [1:37857] 0 0 1 1 2 2 3 5 5 5 ...\n  ..$ target   : int [1:37857] 1841 4 0 16180 0 16180 0 5088 14332 11677 ...\n  ..$ key      : int [1:37857] 0 0 0 0 0 0 0 0 0 0 ...\n```\n\n\n:::\n:::\n\n\n\n\nthe str() to using to overview the dataset, and getting the maximum data in whole dtaset.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(kg,max.level = 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nList of 5\n $ directed  : logi TRUE\n $ multigraph: logi TRUE\n $ graph     :List of 2\n $ nodes     :'data.frame':\t17412 obs. of  10 variables:\n $ links     :'data.frame':\t37857 obs. of  4 variables:\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnodes_tbl <- as_tibble(kg$nodes)\nedges_tbl <- as_tibble(kg$links)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=nodes_tbl,\n      aes(y=`Node Type`))+\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](In-class_Ex01_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\n\n## step 1  mapping from node id to row index\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nid_map <-tibble(id=nodes_tbl$id,\n                index=seq_len(\n                  nrow(nodes_tbl)))\n```\n:::\n\n\n\nthis ensure each id from your node list is mapped to the correct row number\n\n# step 2 map source and target IDS to the row indices\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nedges_tbl <- edges_tbl %>%\n  left_join(id_map, by= c(\"source\" = \"id\")) %>%\n  rename(from = index) %>%\n  left_join(id_map, by= c(\"target\" = \"id\")) %>%\n  rename(to = index)\n```\n:::\n\n\n\n# step 3 filter out any unmatched (invalid) edges\n\n\n::: {.cell}\n\n```{.r .cell-code}\nedges_tbl <-edges_tbl %>%\n  filter(!is.na(from),!is.na(to))\n```\n:::\n\n\n# step 4 creating the graph\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngraph <-tbl_graph(nodes=nodes_tbl,\n                  edges=edges_tbl,\n                  directed=kg$directed)\n```\n:::\n\n\n\nvisualising the knowledge graoh\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\n```\n:::\n\n\n\n### visualising the whole graph\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggraph(graph,layout=\"fr\") +\n  geom_edge_link(alpha=0.3,\n                 colour=\"gray\")+\n  geom_node_point(aes(color=\"Node Type\"),\n                  size=4)+\n  geom_node_text(aes(label=name),\n                 repel = TRUE,\n                 size=2.5)+\n  theme_void()\n```\n:::\n\n\n\n\n\n\n### step 1: filter edges to only\"memberOf\"\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngraph_memberof <-graph %>%\n  activate(edges) %>%\n  filter('Edge Type'==\"Memberof\")\n```\n:::\n\n\n\n### step 2: extract only connected nodes \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nuse_node_indices <-graph_memberof %>%\n  activate(edges)%>%\n  as_tibble()%>%\n  select(from,to)%>%\n  unlist()%>%\n  unique()\n```\n:::\n\n\n\n\n###step 3 keep only those nodes\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngraph_memberof <-graph_memberof %>%\n  activate(nodes)%>%\n  mutate(row_id=row_number()) %>%\n  filter(row_id %in% use_node_indices)%>%\n  select(-row_id)\n```\n:::\n\n\n\n\n### plot the sub graph\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggraph(graph_memberof,\n       layout = \"fr\")+\n  geom_edge_link(alpha=0.5,\n                colour=\"gray\")+\n  geom_edge_point(aes(colour=\"Node Tpye\"),\n                  size=1)+\n  geom_node_text(aes(label = name),\n                 repel = TRUE,\n                 size=2.5)+\n  theme_void()\n```\n\n::: {.cell-output-display}\n![](In-class_Ex01_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "In-class_Ex01_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}