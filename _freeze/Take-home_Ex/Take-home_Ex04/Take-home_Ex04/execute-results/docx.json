{
  "hash": "c3e31ac8f814f9cae2f7b62174de55b1",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Take home Exercise 3\"\nauthor: \"Yang Lu\"\ndate: \"15 Jun 2025\"\ndate-modified: \"last-modified\"\nformat: docx\ncode-fold: true\ncode-summary: \"Show the code\"\neditor: visual\nexecute: \n  eval: false  \n  echo: true  \n  warning: false \n  freeze: true \n---\n\n\n\n# **Take-home Exercise 3: Prototyping Modules for Visual Analytics Shiny Application**\n\n# **Storyboard**\n\n## Section 1: Design for UI theme +Navbar\n\nThere will split the section into : Homepage about project introduction, Project timeline, the hand draw UI sketch, Task 1, Task 2, Task 3 , Task 4 and Team member.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# --------------------------------------------------\n# 1. DIY bslib theme\n# --------------------------------------------------\ntheme_covert <- bs_theme(\n  bg           = \"#585651\",\n  fg           = \"#090605\",\n  primary      = \"#ba9b8d\",\n  secondary    = \"#814a38\",\n  base_font    = font_google(\"Rubik\"),\n  heading_font = font_google(\"Rubik\")\n)\n\n# --------------------------------------------------\n#  UI\n# --------------------------------------------------\nui <- fluidPage(\n  theme = theme_covert,\n  tags$head(\n    tags$style(HTML(\"\n      html, body { scroll-behavior: smooth; }\n      .navbar-covert { background-color: #FFF; }\n      .navbar-covert .nav-link { color: #c17e72 !important; font-weight: 500; }\n      .navbar-covert .nav-link:hover { color: #DBCAC3 !important; }\n      body { padding-top: 70px; }\n      section { padding: 60px 20px; }\n      /* web BG set for #DBCAC3 section */\n#home,\n#sketch,\n#task2,\n#task4 {\n  background-color: #DBCAC3 !important;\n}\n\n/* web BG set for #ebe2de section */\n#timeline,\n#task1,\n#task3,\n#team {\n  background-color: #ebe2de !important;\n}\n\n      /* TabsetPanel  */\n      .nav-tabs .nav-link {\n        color: #000 !important;\n        background-color: #bda59f !important;\n      }\n      .nav-tabs .nav-item.show .nav-link,\n      .nav-tabs .nav-link.active {\n        color: #000 !important;\n        background-color: #bda59f !important;\n      }\n\n      /* Dropdown box color matching */\n      .form-control.shiny-bound-input,\n      .selectize-control.single .selectize-input {\n        background-color: #bda59f !important;\n        color: #000 !important;\n        border-color: #bda59f !important;\n      }\n      .selectize-dropdown {\n        background-color: #bda59f !important;\n        color: #000 !important;\n      }\n\n      /* dateRangeInput bg & text */\n      #date_range .form-control {\n        background-color: #bda59f !important;\n        color: #000 !important;\n        border-color: #bda59f !important;\n      }\n      #date_range .input-group-text {\n        background-color: #bda59f !important;\n        color: #000 !important;\n        border-color: #bda59f !important;\n      }\n    \"))\n  ),\n  \n  # Navbar\n  tags$nav(class = \"navbar navbar-expand-lg navbar-covert fixed-top\",\n           tags$div(class = \"container-fluid\",\n                    tags$a(class = \"navbar-brand text-white\", href = \"#home\",\n                           tags$span(\"COVERT REEF \"), tags$span(\"\\U0001FAB8\", style = \"font-size:24px;\")\n                    ),\n                    tags$button(class = \"navbar-toggler\", type = \"button\",\n                                `data-bs-toggle` = \"collapse\", `data-bs-target` = \"#menuCovert\",\n                                tags$span(class = \"navbar-toggler-icon\")\n                    ),\n                    tags$div(class = \"collapse navbar-collapse\", id = \"menuCovert\",\n                             tags$ul(class = \"navbar-nav ms-auto\",\n                                     tags$li(class = \"nav-item\", tags$a(class = \"nav-link\", href = \"#home\",     \"Home\")),\n                                     tags$li(class = \"nav-item\", tags$a(class = \"nav-link\", href = \"#timeline\",\"Timeline\")),\n                                     tags$li(class=  \"nav-item\", tags$a(class=\"nav-link\", href=\"#sketch\", \"UI Sketch\")),\n                                     tags$li(class = \"nav-item\", tags$a(class = \"nav-link\", href = \"#task1\",   \"Task 1\")),\n                                     tags$li(class = \"nav-item\", tags$a(class = \"nav-link\", href = \"#task2\",   \"Task 2\")),\n                                     tags$li(class = \"nav-item\", tags$a(class = \"nav-link\", href = \"#task3\",   \"Task 3\")),\n                                     tags$li(class = \"nav-item\", tags$a(class = \"nav-link\", href = \"#task4\",   \"Task 4\")),\n                                     tags$li(class = \"nav-item\", tags$a(class = \"nav-link\", href = \"#team\",    \"Team\"))\n                             )\n                    )\n           )\n  )\n```\n:::\n\n\n\n## Section 2 :Project Introduction\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n # Home Section\n  tags$section(id=\"home\", fluidRow(column(12,\n                                          h1(\"Project Introduction\"),\n                                          p(\"Clepper, a lead investigator on Oceanus, has been closely monitoring the closure of Nemo Reef. Over the span of two weeks, he and his intern listened to and analyzed radio communications and utilized his investigative tools to uncover a complex web of expedited approvals, hidden communication, and secretive logistics. Their investigation revealed a story involving high-level Oceanus officials, Sailor Shift’s team, local influential families, and the Green Guardians, who are a local conservationist group, pointing towards possibilities of corruption and manipulation. Amidst this investigation, Nadia Conti, a known figure formerly entangled in illegal fishing operations, has resurfaced as a person of interest. The project aims to develop new and novel visual analytics techniques to support Clepper’s investigation in uncovering the full extent of the events on Oceanus.\"),\n                                          h3(\"Objectives\"),\n                                          tags$ul(\n                                            tags$li(\"Identifying daily temporal patterns in communication to detect recurring message timings.\n\n\"),\n                                            tags$li(\"Analysing the shifts in communication patterns across the two weeks.\n\n\"),\n                                            tags$li(\"Focus on specific entities to determine influence within the network.\"),\n                                            tags$li(\"Visualising the interactions between people and vessels to explore the interactions and relationships in the knowledge graph\"),\n                                            tags$li(\"Applying community detection to uncover groups that are closely associated with the community and the topic areas predominant for each group.\"),\n                                            tags$li(\"Detecting which person or vessel is using pseudonyms and unraveling them.\n\n\"),\n                                            tags$li(\"Identifying common entities in the knowledge graph.\"),\n                                            tags$li(\"Understanding of the activities by unraveling pseudonyms and tracking their interactions.\"),\n                                            tags$li(\"Providing evidence through visual analytics to determine whether Nadia Conti is engaging in illicit activity.\"),\n                                            tags$li(\"Presenting a summary of Nadia’s actions and visual reasoning behind any suspicion.\")\n                                          )\n  )))\n```\n:::\n\n\n\n![](images/clipboard-117768707.png)\n\n## Section 3: Project Timeline\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#-------UI-------\n  # Timeline Section\n  tags$section(id=\"timeline\", fluidRow(column(12,\n                                              h2(\"Project Timeline\"),\n                                              plotOutput(\"timeline_plot\", height=\"400px\")\n  )))\n\n#-----server----\n\nserver <- function(input, output, session) {\n  \n  # --- Project Timeline ---\n  output$timeline_plot <- renderPlot({\n    data <- read.csv(text = \"\nevent,group,start,end,color\n,Project Proposal,2025-06-02,2025-06-08,#a5d6a7\n,Exploratory data analysis,2025-05-20,2025-06-08,#a5d6a7\n,Exploratory data analysis,2025-06-08,2025-06-09,#DD4B39\n,R Quarto/ Netlify,2025-05-20,2025-06-08,#a5d6a7\n,R Quarto/ Netlify,2025-06-08,2025-06-30,#DD4B39\n,R Shiny App,2025-06-15,2025-07-06,#DD4B39\n,Poster,2025-06-23,2025-06-26,#DD4B39\n,User Guide,2025-06-15,2025-06-26,#DD4B39\n\", stringsAsFactors = FALSE)\n    data <- data %>%\n      mutate(\n        start = as.POSIXct(start),\n        end   = as.POSIXct(end),\n        color = recode(color,\n                       `#a5d6a7` = \"#8979BF\",\n                       `#DD4B39` = \"#B0BF79\")\n      )\n    gg_vistime(data) +\n      geom_vline(xintercept = as.numeric(as.POSIXct(\"2025-06-08\")), color = \"red\") +\n      scale_x_datetime(date_breaks = \"3 days\", date_labels = \"%d %b\") +\n      theme_minimal(base_family = \"Rubik\") +\n      theme(axis.text.x = element_text(angle = 45, hjust = 1))\n  }, bg = \"transparent\", res = 96)\n  }\n```\n:::\n\n\n\n![](images/clipboard-1059278560.png)\n\n## Section 4: UI Sketch\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n # UI Sketch\n  tags$section(id=\"sketch\", fluidRow(column(12,\n                                            h2(\"UI Sketch\"),\n                                            img(src=\"sketch.jpg\", alt=\"UI Sketch\",\n                                                style=\"max-width:60%; border:1px solid #ccc;\")\n```\n:::\n\n\n\n![](images/clipboard-1342992341.png){width=\"191\"}\n\n## Section 5: Task 1 Interactive Visual Analytics\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#-----UI-------------\n\n  # — Task 1 —\n  tags$section(id=\"task1\", fluidRow(column(12,\n                                           h2(\"Task 1: Interactive Visual Analytics\"),\n                                           tabsetPanel(id=\"task1_tabs\", type=\"tabs\",\n                                                       \n                                                       tabPanel(\"1.1 Daily Patterns\",\n                                                                fluidRow(\n                                                                  column(4, dateRangeInput(\"date_range\",\"Select date range:\", start=NULL, end=NULL)),\n                                                                  column(4, sliderInput(\"hour_range\",\"Select hour range:\",0,23,c(0,23),step=1))\n                                                                ),\n                                                                plotOutput(\"heatmap\", height=\"600px\")\n                                                       ),\n                                                       \n                                                       tabPanel(\"1.2 Week Comparison\",\n                                                                fluidRow(\n                                                                  column(4, checkboxGroupInput(\"weeks\",\"Select Week:\",c(\"Week 1\",\"Week 2\"),c(\"Week 1\",\"Week 2\"))),\n                                                                  column(4, sliderInput(\"hour_range2\",\"Hourly interval:\",0,23,c(0,23),step=1))\n                                                                ),\n                                                                plotOutput(\"week_plot\", height=\"450px\")\n                                                       ),\n                                                       \n                                                       tabPanel(\"1.3 Influence Analysis\",\n                                                                fluidRow(\n                                                                  column(6,\n                                                                         selectInput(\"subtype\",\"Select subtype:\",choices=NULL),\n                                                                         plotlyOutput(\"inf_plot\", height=\"600px\")\n                                                                  ),\n                                                                  column(6,\n                                                                         selectInput(\"target\",\"Select entity:\",choices=NULL),\n                                                                         plotOutput(\"net_plot\", height=\"600px\")\n                                                                  )\n                                                                )\n                                                       )\n                                                       \n                                           )\n  )))\n  \n\n\n#-----server----\n\nserver <- function(input, output, session) {\n  \n\n  \n  # --- Load data ---\n  MC3_graph <- fromJSON(\"data/MC3_graph.json\")\n  nodes_tbl  <- as_tibble(MC3_graph$nodes)\n  edges_tbl  <- as_tibble(MC3_graph$edges)\n  \n  comm_nodes <- nodes_tbl %>%\n    filter(type==\"Event\", sub_type==\"Communication\") %>%\n    transmute(event_id=id, timestamp)\n  sent_edges <- edges_tbl %>% filter(type==\"sent\")   %>% transmute(sender=source, event_id=target)\n  recv_edges <- edges_tbl %>% filter(type==\"received\") %>% transmute(event_id=source, receiver=target)\n  \n  msgs <- sent_edges %>%\n    inner_join(recv_edges, by=\"event_id\") %>%\n    inner_join(comm_nodes, by=\"event_id\") %>%\n    mutate(\n      ts   = ymd_hms(timestamp, tz=\"UTC\"),\n      date = as_date(ts),\n      hour = hour(ts)\n    )\n \n\n  # ---- Task 1 logic ----\n  heatmap_data <- msgs %>%\n    count(date, hour) %>%\n    complete(date=seq(min(date),max(date),by=\"1 day\"),\n             hour=0:23, fill=list(n=0))\n  updateDateRangeInput(session,\"date_range\",\n                       start=min(heatmap_data$date),\n                       end  =max(heatmap_data$date))\n  \n  week_patterns <- msgs %>%\n    mutate(week=if_else(date<=min(date)+days(6),\"Week 1\",\"Week 2\")) %>%\n    count(week,hour) %>%\n    group_by(week) %>%\n    mutate(proportion=n/sum(n)) %>%\n    ungroup()\n  \n  entity_info <- nodes_tbl %>%\n    filter(type==\"Entity\") %>%\n    transmute(id, target_subtype=sub_type)\n  msgs2 <- msgs %>% left_join(entity_info, by=c(\"receiver\"=\"id\"))\n  top_inf <- msgs2 %>%\n    filter(!is.na(receiver)) %>%\n    count(target_subtype, receiver, sender, sort=TRUE) %>%\n    group_by(target_subtype, receiver) %>%\n    slice_max(n, n=10) %>%\n    ungroup()\n  subtypes <- unique(top_inf$target_subtype)\n  updateSelectInput(session,\"subtype\",\n                    choices=subtypes,\n                    selected=subtypes[1])\n  \n  ee_edges     <- msgs %>% transmute(from=sender, to=receiver)\n  entity_nodes <- nodes_tbl %>% filter(type==\"Entity\") %>% transmute(id,name)\n  g_ig         <- graph_from_data_frame(ee_edges, vertices=entity_nodes, directed=TRUE)\n  all_targets  <- sort(V(g_ig)$name)\n  updateSelectInput(session,\"target\",\n                    choices=all_targets,\n                    selected=all_targets[1])\n  \n#---- 1.1 Heat map-------------\n  filtered_data <- reactive({\n    req(input$date_range)\n    heatmap_data %>%\n      filter(\n        date >= input$date_range[1],\n        date <= input$date_range[2],\n        hour >= input$hour_range[1],\n        hour <= input$hour_range[2]\n      )\n  })\n  output$heatmap <- renderPlot({\n    df <- filtered_data()\n    ggplot(df, aes(hour, date, fill = n)) +\n      geom_tile(color = \"white\") +\n      scale_x_continuous(breaks = seq(input$hour_range[1], input$hour_range[2], by = 1),\n                         expand = c(0,0)) +\n      scale_y_date(\n        breaks = seq(min(heatmap_data$date), max(heatmap_data$date), by = \"1 day\"),\n        date_labels = \"%b %d\",\n        expand = c(0, 0)\n      ) +\n      scale_fill_distiller(name = \"Messages\", palette = \"Spectral\", direction = 1) +\n      theme_minimal() +\n      theme(panel.grid = element_blank())\n  }, res = 96)\n  \n  \n#---------- 1.2 Week Comparison-------------\n  output$week_plot <- renderPlot({\n    df <- week_patterns %>%\n      filter(week %in% input$weeks,\n             hour >= input$hour_range2[1],\n             hour <= input$hour_range2[2])\n    ggplot(df, aes(hour, proportion, color=week)) +\n      geom_line() + geom_point() +\n      scale_y_continuous(labels=percent_format()) +\n      theme_light() +\n      theme(legend.position=\"top\")\n  })\n  \n #--------------1.3 Influence Bar--------------\n  output$inf_plot <- renderPlotly({\n    df <- top_inf %>%\n      filter(target_subtype == input$subtype)\n    p <- ggplot(df,\n                aes(reorder(sender, n), n,\n                    fill = receiver,\n                    text = paste0(\"Sender: \", sender, \"\\nCount: \", n))) +\n      geom_col() + coord_flip() +\n      labs(x=\"Sender\", y=\"Count\") +\n      theme_minimal()\n    ggplotly(p, tooltip=\"text\")\n  })\n  \n  # 1.3 Influence Network\n  output$net_plot <- renderPlot({\n    req(input$target)\n    root <- which(V(g_ig)$name == input$target)\n    vids <- unique(c(\n      root,\n      neighbors(g_ig, root, mode=\"in\"),\n      neighbors(g_ig, root, mode=\"out\")\n    ))\n    subg <- induced_subgraph(g_ig, vids)\n    ggraph(subg, layout=\"kk\") +\n      geom_edge_link(color=\"grey70\") +\n      geom_node_point(aes(filter=(name==input$target)),\n                      color=\"firebrick\", size=6) +\n      geom_node_point(aes(filter=(name!=input$target)),\n                      color=\"steelblue\", size=4) +\n      geom_node_text(aes(label=name),\n                     repel=TRUE, size=3) +\n      theme_void()\n  })\n```\n:::\n\n\n\n![](images/clipboard-616636990.png)\n\n## Section 6:Task 2\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#--------UI---------\n # — Task 2 —\n  tags$section(id=\"task2\", fluidRow(column(12,\n                                           h2(\"Task 2: People & Vessels Analysis\"),\n                                           tabsetPanel(id=\"task2_tabs\", type=\"tabs\",\n                                                       \n                                                       tabPanel(\"2.1 Plotted Timeline- People & Vessels\",\n                                                                plotlyOutput(\"pv_timeline\", height=\"500px\"),\n                                                                br(), verbatimTextOutput(\"task2a_findings\")\n                                                       ),\n                                                       \n                                                       # inside your tabsetPanel(id=\"task2_tabs\", type=\"tabs\", …)\n                                                       tabPanel(\"2.2 Communities Detection\",\n                                                                \n                                                                # 1) Community Detection (static)\n                                                                fluidRow(\n                                                                  column(12, h4(\" Community Detection – People & Vessels\")),\n                                                                  column(12, plotOutput(\"comm_graph\", height = \"450px\"))\n                                                                ),\n                                                                \n                                                                # 2) PageRank PageRank bar + network\n                                                                fluidRow(\n                                                                  column(6,\n                                                                         h4(\"PageRank Centrality (Top 10 Nodes)\"),\n                                                                         plotOutput(\"pr_bar\", height = \"350px\")\n                                                                  ),\n                                                                  column(6,\n                                                                         h4(\"PageRank‐Sized Network\"),\n                                                                         plotOutput(\"pr_graph\", height = \"350px\")\n                                                                  )\n                                                                ),\n                                                                h5(\" Findings\"),\n                                                                verbatimTextOutput(\"task2b_pr_findings\"),\n                                                                \n                                                                # 4) Membership summary (white background)\n                                                                fluidRow(\n                                                                  column(12, h4(\"Community Group Membership – Top 5\")),\n                                                                  column(12,\n                                                                         div(style=\"background:white; padding:8px;\",\n                                                                             tableOutput(\"comm_membership\")\n                                                                         )\n                                                                  )\n                                                                ),\n                                                                \n                                                                # 5) Interactive community timeline\n                                                                fluidRow(\n                                                                  column(12, h4(\"Plotted Community Timeline\")),\n                                                                  column(12, plotlyOutput(\"comm_timeline\", height = \"450px\"))\n                                                                ),\n                                                                \n                                                                # 6) Discussion\n                                                                h5(\"Discussion / Interpretation\"),\n                                                                verbatimTextOutput(\"task2b_discussion\")\n                                                       )\n                                                       \n                                                       \n                                           )\n  )))\n\n\n\n#--------Server---------\n  # ---- Task 2 prep ----\n  g_undir <- as_undirected(g_ig, mode=\"collapse\")\n  \n  comm_obj <- reactive({ cluster_walktrap(g_undir) })\n  \n  # Shared timeline reactive\n  entity_meta <- nodes_tbl %>%\n    filter(type==\"Entity\") %>%\n    transmute(id,name,sub_type)\n  timeline_df <- reactive({\n    msgs %>%\n      left_join(entity_meta, by=c(\"sender\"=\"id\")) %>%\n      filter(sub_type %in% c(\"Person\",\"Vessel\")) %>%\n      mutate(Type=sub_type)\n  })\n  \n  # 2.a Interactive Timeline\n  output$pv_timeline <- renderPlotly({\n    df <- timeline_df()\n    p <- ggplot(df,\n                aes(date, hour,\n                    color = name,\n                    shape = Type,\n                    text  = paste(name, Type, hour))) +\n      geom_point(size=3, alpha=0.8) +\n      facet_wrap(~Type, ncol=1) +\n      scale_shape_manual(values=c(Person=16, Vessel=17)) +\n      labs(x=\"Date\", y=\"Time of Day\", color=\"Sender\") +\n      theme_minimal()\n    ggplotly(p, tooltip=\"text\")\n  })\n  output$task2a_findings <- renderText({\n    \"Findings on People/ Vessels:\nCore logic:\n\n-If two names appear as sender and recipient in the same message, they cannot belong to the same person — i.e., they’re not aliases of each other.\n\n-If two names sent a message at the exact time, they cannot belong to the same person.\n\n-For instance, if Nadia sent a message to The Accountant, they would not be the same individual. If Nadia sent a message at 10am to The Accountant and The Lookout also sent a message at 10am to The Intern, Nadia and The Lookout cannot be the same person.\n\nSelect only The Accountant, Mrs. Money, Elise: We see close timings between Mrs. Money and Elise on 8 Oct, and 10 Oct. These were on the same topic. Elise then disappears from radar on 10 Oct. She reappears as The Accountant and Mrs. Money on 11 Oct on the same topic and remains only as The Accountant till 14 Oct.\nSelect only Liam and The Middleman: The Middleman disappeared on 7 Oct and appeared as Liam on 8 Oct. On 11 Oct Mrs. Money asked The Middleman if anything was found by conservation vessels. On the same day, Liam reappeared and replied Elise that nothing was found by them.\n\nSelect only The Boss and Nadia: The Boss disappeared on 5 Oct and reappeared as Nadia on 8 Oct. Likely the same person.\n\nSelect only Small Fry and Rodriguez: on 2 Oct Rodriguez corresponded with Remora and Mako on meeting at the slip #14. It happened again on 14 Oct as he took on dual roles and responded to the same message with different names. Likely the same person.\n\nSelect only The Lookout and Sam: on 7 Oct Sam asked Kelly to get information on who authorized the permit. 2 minutes later, The Lookout (Kelly) responded to The Intern (Sam), that it was signed by Jensen from City Council.\n\nSeawatch only appeared on 10 Oct but Horizon talked to Seawatch on 8 Oct. Therefore, some other entity is Seawatch before or during 8 Oct. Defender told Seawatch on 3 Oct at 8.39am that it increased its patrol and informed Seawatch to maintain vigilance. The Lookout (Seawatch) responded to Sentinel (Defender) at 8.41am that it acknowledged the need for vigilance.\n\n        \"\n  })\n  \n  # 2.b Static Community Detection\n  output$comm_net_static <- renderPlot({\n    mem <- membership(comm_obj())\n    ggraph(g_undir, layout=\"kk\") +\n      geom_edge_link(color=\"grey80\", alpha=0.5) +\n      geom_node_point(aes(color=factor(mem[name])), size=4) +\n      geom_node_text(aes(label=name, color=factor(mem[name])),\n                     repel=TRUE, size=3) +\n      scale_color_manual(values=c(\"1\"=\"#E41A1C\",\"2\"=\"#377EB8\",\n                                  \"3\"=\"#4DAF4A\",\"4\"=\"#984EA3\",\"5\"=\"#FF7F00\")) +\n      labs(color=\"Community\") +\n      theme_void()\n  })\n  \n  # --- Before these outputs, define a shared reactive timeline_df() ---\n  timeline_df <- reactive({\n    msgs %>%\n      left_join(\n        nodes_tbl %>% filter(type==\"Entity\") %>% transmute(id,name,sub_type),\n        by = c(\"sender\" = \"id\")\n      ) %>%\n      filter(sub_type %in% c(\"Person\",\"Vessel\")) %>%\n      mutate(Type = sub_type)\n  })\n  \n  # 1) Static community‐detection plot\n  output$comm_graph <- renderPlot({\n    com  <- cluster_louvain(as.undirected(g_ig, mode=\"collapse\"))\n    mem  <- membership(com)\n    ggraph(as.undirected(g_ig,mode=\"collapse\"), layout=\"kk\") +\n      geom_edge_link(color=\"grey80\", alpha=0.5) +\n      geom_node_point(aes(color=factor(mem[name])), size=4) +\n      geom_node_text(aes(label=name, color=factor(mem[name])),\n                     repel=TRUE, size=3) +\n      scale_color_manual(values=c(\"1\"=\"#E41A1C\",\"2\"=\"#377EB8\",\"3\"=\"#4DAF4A\",\n                                  \"4\"=\"#984EA3\",\"5\"=\"#FF7F00\")) +\n      theme_void()\n  })\n  \n  # precompute PageRank\n  pr_vals <- page_rank(as.undirected(g_ig,mode=\"collapse\"))$vector\n  \n  # 2a) Bar chart of top PageRank nodes\n  output$pr_bar <- renderPlot({\n    pr_df <- tibble(\n      name     = V(g_ig)$name,\n      pagerank = pr_vals\n    ) %>%\n      arrange(desc(pagerank)) %>%\n      slice_head(n=10)\n    \n    ggplot(pr_df, aes(reorder(name, pagerank), pagerank)) +\n      geom_col(fill=\"#377EB8\") +\n      coord_flip() +\n      labs(x=\"Node\", y=\"PageRank\", title=\"Top 10 by PageRank\") +\n      theme_minimal(base_size=12)\n  })\n  \n  # 2b) Static network sized by PageRank\n  output$pr_graph <- renderPlot({\n    mem <- membership(cluster_louvain(as.undirected(g_ig,mode=\"collapse\")))\n    ggraph(as.undirected(g_ig,mode=\"collapse\"), layout=\"kk\") +\n      geom_edge_link(color=\"grey80\", alpha=0.5) +\n      geom_node_point(aes(size=pr_vals, color=factor(mem[name])), show.legend=\"point\") +\n      geom_node_text(aes(label=name, color=factor(mem[name])),\n                     repel=TRUE, size=3) +\n      scale_size(range=c(2,8), name=\"PageRank\") +\n      scale_color_manual(values=c(\"1\"=\"#E41A1C\",\"2\"=\"#377EB8\",\"3\"=\"#4DAF4A\",\n                                  \"4\"=\"#984EA3\",\"5\"=\"#FF7F00\")) +\n      theme_void()\n  })\n   # 3) Findings for PageRank step\n  output$task2b_pr_findings <- renderText({\n    \"Findings:\n- There were 5 closely associated groups. Community 5 (Clepper and Miranda) appeared to be segmented from the central group, due to the non-involvement from the nature of their investigative work.\nFrom the graph, we extracted the 8 influential nodes to focus on:\nCommunity 1: Mako\nCommunity 2: Neptune, Remora, Nadia, Davis\nCommunity 3: N/A as they were not very influential at global level\nCommunity 4: Mrs. Money, Boss, The Middleman\nCommunity 5: N/A as they were not very influential at global level\nCommunity 6: N/A as they were not very influential at global level\"\n  })\n  \n  # 4) Membership & top topics (top 5 groups)\n  output$comm_membership <- renderTable({\n    com   <- cluster_louvain(as.undirected(g_ig,mode=\"collapse\"))\n    mem   <- membership(com)\n    # build membership + topics as before\n    mem_df <- tibble(name=names(mem), community=mem)\n    part   <- edges_tbl %>%\n      filter(type %in% c(\"sent\",\"received\")) %>%\n      mutate(entity = ifelse(type==\"sent\", source, target),\n             event  = ifelse(type==\"sent\", target, source)) %>%\n      select(entity, event)\n    about  <- edges_tbl %>% filter(type==\"about\") %>% transmute(event=source, topic=target)\n    topics <- nodes_tbl %>% filter(type==\"Topic\") %>% transmute(id, topic_name=name)\n    \n    joined <- part %>%\n      inner_join(about, by=\"event\") %>%\n      inner_join(topics, by=c(\"topic\"=\"id\")) %>%\n      left_join(mem_df, by=c(\"entity\"=\"name\"))\n    \n    top_topics <- joined %>%\n      count(community, topic_name, name=\"n\") %>%\n      group_by(community) %>%\n      slice_max(n, n=3) %>%\n      summarise(predominant = paste(topic_name, collapse=\", \"))\n    \n    members <- mem_df %>%\n      group_by(community) %>%\n      summarise(Members=paste(name, collapse=\", \"))\n    \n    out <- members %>%\n      left_join(top_topics, by=\"community\") %>%\n      rename(Group=community) %>%\n      arrange(Group) %>%\n      slice_head(n=5)\n    \n    out\n  }, bordered=TRUE, spacing=\"xs\")\n  \n\n  \n  # 6) Interactive community timeline\n  output$comm_timeline <- renderPlotly({\n    # reuse timeline_df() defined above Task 2.a\n    df <- timeline_df() %>%\n      left_join(tibble(name=names(membership(cluster_louvain(as.undirected(g_ig,mode=\"collapse\")))),\n                       community=membership(cluster_louvain(as.undirected(g_ig,mode=\"collapse\")))),\n                by=\"name\")\n    p <- ggplot(df, aes(date, hour, color=factor(community), shape=Type,\n                        text=paste(name, \"Grp\", community, hour))) +\n      geom_point(size=3, alpha=0.8) +\n      facet_wrap(~Type, ncol=1) +\n      scale_shape_manual(values=c(Person=16, Vessel=17)) +\n      labs(x=\"Date\", y=\"Time of Day\", color=\"Community\") +\n      theme_minimal()\n    ggplotly(p, tooltip=\"text\")\n  })\n  \n  # 7) Discussion / Interpretation\n  output$task2b_discussion <- renderText({\n    \"Discussion:\nWe mainly focused on the conversations by 8 influential nodes and some related nodes:\nConservation Group (Comm.1): Samantha Blake informed Mako to stop operations on 8 and 10th Oct. Serenity is a private luxury yacht. Osprey was likely a tourism vessel looking for charter from Mako for their tourists.\n\nPermit (Comm. 2): Neptune, Remora, Nadia, and Davis were working on Nemo Reef operation. This referred to the Music Video Production for Sailor Shift on 14 Oct.\n\nPseudonym (Comm. 3): Other than communicating among themselves, The Lookout appeared to have also externally corresponded with Sentinel, Reef Guardian and Horizon (conservation based topics), while The Intern also externally corresponded with Mrs. Money.\n\nSuspicious (Comm. 4): The Middleman had access to Council documents. Mrs. Money had funding from sources that would not flag out to regulators for her operations. Mrs. Money was investigating V. Miesel’s structures. On 5 Oct, Boss told Mrs. Money to disguise financial trails through tourism ventures and destroy evidence of Nemo Reef operations.\n\nHacklee Herald (Comm. 5): Conversations between Clepper and his intern Miranda which ended on 11 Oct. Miranda mentioned an Oceanus City Council Member meeting with unmarked vessels at night.\"\n  })\n```\n:::\n\n\n\n![](images/clipboard-3540139786.png)\n\n## Section 7:Task 3 Pseudonym Identification\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#-------------UI------------------\n  # — Task 3: Pseudonym Identification —\n  tags$section(id=\"task3\", fluidRow(\n    column(12,\n           h2(\"Task 3: Pseudonym Identification\"),\n           tabsetPanel(id=\"task3_tabs\", type=\"tabs\",\n                       \n                       # 3.1: Rules & Table\n                       tabPanel(\"3.1 Rules & Table\",\n                                h4(\"Rules to identify pseudonyms:\"),\n                                tags$ul(\n                                  tags$li(\"Names starting with “The ” are likely pseudonyms.\"),\n                                  tags$li(\"Names containing keywords: Boss, Accountant, Middleman, Lookout, Intern, Money, Fry.\")\n                                ),\n                                tableOutput(\"pseudo_table\")\n                       ),\n                       \n                       # 3.2: Pseudonym Network\n                       tabPanel(\"3.2 Pseudonym Network\",\n                                visNetworkOutput(\"pseudonym_net\", height = \"500px\")\n                       ),\n                       \n                       # 3.3: Conclusion\n                       tabPanel(\"3.3 Conclusion\",\n                                verbatimTextOutput(\"task3_conclusion\")\n                       )\n                       \n           )\n    )\n  ))\n\n\n#-----server--------\n  \n  # 3.1 Build the pseudo table\n  nodes_person <- nodes_tbl %>%\n    filter(sub_type == \"Person\") %>%\n    transmute(id, label = name, sub_type)\n  \n  pseudonym_keywords <- c(\"Boss\", \"Accountant\", \"Middleman\", \"Lookout\",\n                          \"Intern\", \"Money\", \"Fry\")\n  \n  pseudo_df <- nodes_person %>%\n    mutate(\n      is_prefix   = str_detect(label, \"^The \"),\n      is_keyword  = str_detect(label, paste(pseudonym_keywords, collapse = \"|\")),\n      is_pseudonym = is_prefix | is_keyword\n    ) %>%\n    filter(is_pseudonym) %>%\n    select(id, label, sub_type)\n  \n  output$pseudo_table <- renderTable({\n    pseudo_df\n  }, striped = TRUE, bordered = TRUE)\n  \n  # 3.2 Build & render the pseudonym-only communication network\n  pseudo_labels <- pseudo_df$label\n  \n  pv_nodes <- data.frame(id = pseudo_labels, label = pseudo_labels)\n  \n  pv_edges <- msgs %>%\n    # attach sender label\n    left_join(nodes_tbl %>% transmute(id, label = name),\n              by = c(\"sender\" = \"id\")) %>%\n    rename(from = label) %>%\n    # attach receiver label\n    left_join(nodes_tbl %>% transmute(id, label = name),\n              by = c(\"receiver\" = \"id\")) %>%\n    rename(to = label) %>%\n    filter(from %in% pseudo_labels, to %in% pseudo_labels) %>%\n    distinct(from, to)\n  \n  output$pseudonym_net <- renderVisNetwork({\n    visNetwork(pv_nodes, pv_edges) %>%\n      visIgraphLayout(layout = \"layout_with_fr\") %>%\n      visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE)\n  })\n  \n  # 3.3 Conclusion\n  output$task3_conclusion <- renderText({\n    paste(\n      \"→ Identified pseudonyms:\",\n      paste(pseudo_df$label, collapse = \", \"),\n      \"\",\n      \"With the explicit identification of pseudonyms such as “Boss,” “The Intern,” “The Accountant,” “Mrs. Money,” “The Middleman,” “The Lookout,” and “Small Fry,” my understanding of the activities within the Oceanus network changed significantly.\",\n      \"Initially, communications and relationships appeared to be fragmented among many individuals and vessels. However, after mapping pseudonyms onto the network, several important patterns emerged:\",\n      \"\",\n      \"-Pseudonyms as Key Hubs: In the visual network, the detected pseudonyms are not peripheral actors—they consistently occupy central hub positions, connecting to multiple vessels and people through various types of relationships (such as “Reports,” “Coordinates,” “Operates,” and “Suspicious”).\",\n      \"-Obscured True Roles: What previously looked like many unrelated participants was actually a small set of influential actors operating under multiple pseudonyms. For example, “The Intern” and “Boss” are both connected to several vessels via “Coordinates” and “Operates” relationships, indicating they may be orchestrating or managing operations behind the scenes.).\",\n      \"-Concealment of Illicit Activity: The structure revealed that pseudonyms are often used to mask direct links between real individuals and vessels—particularly in suspicious or high-frequency communication events. This suggests intentional obfuscation, possibly to hide illicit coordination or the flow of sensitive information.)\",\n      \"-Redefining Influence and Risk: By highlighting pseudonyms, it becomes clear that influence within the network is far more centralized than the real-name view suggested. A few pseudonyms control or interact with a large proportion of vessels and people, making them high-value targets for further investigation.\",\n      sep = \"\\n\")\n  })\n```\n:::\n\n\n\n![](images/clipboard-2117641910.png)\n\n## Section 8:Task 4 Nidia Conti Investigation\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#------------UI-------------\n tags$section(id=\"task4\", fluidRow(\n    column(12,\n           h2(\"Task 4: Nadia Conti Investigation\"),\n           tabsetPanel(id=\"task4_tabs\", type=\"tabs\",\n                       \n                       # 4.1 Evidence (5 steps) —\n                       tabPanel(\"4.1 Evidence\",\n                                tabsetPanel(type=\"tabs\",\n                                            \n                                            # 1) 8.1 Nadia’s Ego Network (1-hop Louvain)\n                                            tabPanel(\"8.1 Ego (1-hop)\",\n                                                     plotOutput(\"nadia_ego_1hop\", height=\"400px\")\n                                            ),\n                                            \n                                            # 2) 8.2 Sent vs Received Comms Nets\n                                            tabPanel(\"8.2 Comms Nets\",\n                                                     fluidRow(\n                                                       column(6,\n                                                              h4(\"8.2.2.1 Sent Communications Network\"),\n                                                              visNetworkOutput(\"nadia_sent_net\", height=\"350px\")\n                                                       ),\n                                                       column(6,\n                                                              h4(\"8.2.2.2 Received Communications Network\"),\n                                                              visNetworkOutput(\"nadia_recv_net\", height=\"350px\")\n                                                       )\n                                                     )\n                                            ),\n                                            \n                                            # 3) Findings\n                                            tabPanel(\"Findings\",\n                                                     verbatimTextOutput(\"task4_1_findings\")\n                                            ),\n                                            \n                                            # 4) 8.3 Nadia’s 2-Hop Ego (Degree Centrality)\n                                            tabPanel(\"8.3 Ego (2-hop)\",\n                                                     plotOutput(\"nadia_ego_2hop\", height=\"400px\")\n                                            ),\n                                            \n                                            # 5) Conclusion\n                                            tabPanel(\"Conclusion\",\n                                                     verbatimTextOutput(\"task4_1_conclusion\")\n                                            )\n                                            \n                                )\n                       ),\n                       \n                       # 4.2 Summary (2 steps) —\n                       tabPanel(\"4.2 Summary\",\n                                fluidRow(\n                                  column(6,\n                                         h4(\"8.4.2 Plotted Timeline (2-hop)\"),\n                                         plotlyOutput(\"nadia_2hop_timeline\", height=\"350px\")\n                                  ),\n                                  column(6,\n                                         h4(\"8.5.1 Ego & Comms Table\"),\n                                         DT::dataTableOutput(\"nadia_comm_table\")\n                                  )\n                                )\n                       )\n                       \n           )\n    )\n  ))\n\n#------------Server-------------\n # 4.0 Nadia’s node ID\n  nadia_id <- nodes_tbl %>% filter(name == \"Nadia Conti\") %>% pull(id)\n  \n  # — 4.1.1 Nadia’s 1-Hop Ego Network (Louvain) —\n  ego1 <- make_ego_graph(as.undirected(g_ig, mode=\"collapse\"),\n                         order = 1,\n                         nodes = which(V(g_ig)$name == \"Nadia Conti\"))[[1]]\n  com1 <- cluster_louvain(ego1)\n  mem1 <- membership(com1)\n  \n  output$nadia_ego_1hop <- renderPlot({\n    ggraph(ego1, layout=\"kk\") +\n      geom_edge_link(color=\"grey80\", alpha=0.5) +\n      geom_node_point(aes(color = factor(mem1)), size=5) +\n      geom_node_text(aes(label = name, color = factor(mem1)),\n                     repel=TRUE) +\n      labs(title = \"Nadia’s 1-Hop Ego Network\", color = \"Comm\") +\n      theme_void()\n  })\n  \n  # — 4.1.2 Sent vs Received Communications Networks —\n  \n  # prepare sent edges/nodes\n  sent_edges1 <- msgs %>%\n    filter(sender == nadia_id) %>%\n    left_join(nodes_tbl %>% transmute(id, label = name),\n              by = c(\"sender\" = \"id\")) %>% rename(from = label) %>%\n    left_join(nodes_tbl %>% transmute(id, label = name),\n              by = c(\"receiver\" = \"id\")) %>% rename(to = label) %>%\n    distinct(from, to)\n  sent_nodes1 <- tibble(id = unique(c(sent_edges1$from, sent_edges1$to)),\n                        label = id)\n  \n  output$nadia_sent_net <- renderVisNetwork({\n    g_sent <- graph_from_data_frame(sent_edges1,\n                                    vertices = sent_nodes1,\n                                    directed = TRUE)\n    visIgraph(g_sent, layout = \"layout_with_fr\") %>%\n      visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE)\n  })\n  \n  # prepare received edges/nodes\n  recv_edges1 <- msgs %>%\n    filter(receiver == nadia_id) %>%\n    left_join(nodes_tbl %>% transmute(id, label = name),\n              by = c(\"sender\" = \"id\")) %>% rename(from = label) %>%\n    left_join(nodes_tbl %>% transmute(id, label = name),\n              by = c(\"receiver\" = \"id\")) %>% rename(to = label) %>%\n    distinct(from, to)\n  recv_nodes1 <- tibble(id = unique(c(recv_edges1$from, recv_edges1$to)),\n                        label = id)\n  \n  output$nadia_recv_net <- renderVisNetwork({\n    g_recv <- graph_from_data_frame(recv_edges1,\n                                    vertices = recv_nodes1,\n                                    directed = TRUE)\n    visIgraph(g_recv, layout = \"layout_with_fr\") %>%\n      visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE)\n  })\n  \n  # — 4.1.3 Findings —\n  output$task4_1_findings <- renderText({\n    paste0(\n      \"Nodes involved: Nadia, Davis, Elise, Haacklee Harbor, Liam, Marlin,\\n\",\n      \"Neptune, Oceanus City Council, Remora, Rodriguez,\\n\",\n      \"Sailor Shifts Team, Sentinel, V. Miesel Shipping.\\n\\n\",\n      \"• Sent more direct communications to Liam (2) and Neptune (2).\\n\",\n      \"• Received more communications from Davis (5), Elise (3), Liam (2).\\n\\n\",\n      \"Next step: drill into suspicious chars/activities.\"\n    )\n  })\n  \n  # — 4.1.4 Nadia’s 2-Hop Ego (Degree Centrality) —\n  ego2 <- make_ego_graph(as.undirected(g_ig, mode=\"collapse\"),\n                         order = 2,\n                         nodes = which(V(g_ig)$name == \"Nadia Conti\"))[[1]]\n  deg2 <- degree(ego2)\n  deg2_df <- tibble(name = names(deg2), degree = deg2)\n  \n  output$nadia_ego_2hop <- renderPlot({\n    ggplot(deg2_df, aes(reorder(name, degree), degree)) +\n      geom_col() +\n      coord_flip() +\n      labs(title = \"Nadia’s 2-Hop Ego (Degree Centrality)\",\n           x = \"Node\", y = \"Degree\") +\n      theme_minimal()\n  })\n  \n  # — 4.1.5 Conclusion —\n  output$task4_1_conclusion <- renderText({\n    paste0(\n      \"1-Hop nodes: Nadia, Davis, Elise, Haacklee Harbor, Liam, Marlin,\\n\",\n      \"Neptune, Oceanus City Council, Remora, Rodriguez,\\n\",\n      \"Sailor Shifts Team, Sentinel, V. Miesel Shipping.\\n\\n\",\n      \"2-Hop additions: EcoVigil, Sam, The Accountant, Nemo Reef.\\n\\n\",\n      \"Use these 2-hop nodes to drill deeper for suspicious links.\"\n    )\n  })\n  \n  # — 4.2.1 Plotted Timeline for all 2-Hop actors —\n  hop2_names <- V(ego2)$name\n  id_map    <- nodes_tbl %>% filter(name %in% hop2_names) %>% transmute(id, name)\n  timeline2 <- msgs %>%\n    filter(sender %in% id_map$id | receiver %in% id_map$id) %>%\n    mutate(Actor = if_else(sender %in% id_map$id,\n                           id_map$name[match(sender, id_map$id)],\n                           id_map$name[match(receiver, id_map$id)]))\n  \n  output$nadia_2hop_timeline <- renderPlotly({\n    p <- ggplot(timeline2, aes(date, hour, color = Actor,\n                               text = paste0(Actor, \"\\n\", format(ts, \"%Y-%m-%d %H:%M\")))) +\n      geom_point(size = 3, alpha = 0.8) +\n      labs(x = \"Date\", y = \"Hour\", color = \"Actor\") +\n      theme_minimal()\n    ggplotly(p, tooltip = \"text\")\n  })\n  \n  # — 4.2.2 Ego & Comms Table for 2-Hop actors —\n  comm2_table <- timeline2 %>%\n    transmute(\n      Date     = as.character(date),\n      Time     = format(ts, \"%H:%M\"),\n      Sender   = nodes_tbl$name[match(sender, nodes_tbl$id)],\n      Receiver = nodes_tbl$name[match(receiver, nodes_tbl$id)],\n      EventID  = event_id\n    )\n  \n  output$nadia_comm_table <- DT::renderDataTable({\n    DT::datatable(comm2_table,\n                  options = list(pageLength = 10, autoWidth = TRUE),\n                  rownames = FALSE)\n  })\n```\n:::\n\n\n\n![](images/clipboard-3686079315.png)\n\n## Section 9: Team introduction\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#---------UI---------\n  tags$section(id=\"team\", fluidRow(column(12,\n                                          h2(\"Team Members\"),\n                                          tags$ul(\n                                            tags$li(\"Audrey\"),\n                                            tags$li(\"Li JianYi\"),\n                                            tags$li(\"Yang Lu\")\n                                          )\n  )))\n)\n```\n:::\n\n\n\n![](images/clipboard-2777381791.png)\n\n## Section 10: The Entire Shiny Code Chunk\n\nThe final UI link:  https://roxyyanglu.shinyapps.io/Take-home_Ex03/\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(shiny)\nlibrary(visNetwork)\nlibrary(ggraph)\nlibrary(plotly)\nlibrary(jsonlite)\nlibrary(tidyverse)\nlibrary(lubridate)\nlibrary(igraph)\nlibrary(vistime)\nlibrary(bslib)\nlibrary(scales)\nlibrary(DT)\nlibrary(stringr)\nlibrary(ggplot2)\n\n# general HTTP downloads\noptions(timeout = max(600, getOption(\"timeout\")))\n# rsconnect-specific network operations\noptions(rsconnect.http.timeout = 120)\n\n\n# --------------------------------------------------\n# 1. DIY bslib theme\n# --------------------------------------------------\ntheme_covert <- bs_theme(\n  bg           = \"#585651\",\n  fg           = \"#090605\",\n  primary      = \"#ba9b8d\",\n  secondary    = \"#814a38\",\n  base_font    = font_google(\"Rubik\"),\n  heading_font = font_google(\"Rubik\")\n)\n\n# --------------------------------------------------\n# UI\n# --------------------------------------------------\nui <- fluidPage(\n  theme = theme_covert,\n  tags$head(\n    tags$style(HTML(\"\n      html, body { scroll-behavior: smooth; }\n      .navbar-covert { background-color: #FFF; }\n      .navbar-covert .nav-link { color: #c17e72 !important; font-weight: 500; }\n      .navbar-covert .nav-link:hover { color: #DBCAC3 !important; }\n      body { padding-top: 70px; }\n      section { padding: 60px 20px; }\n      /* web BG set for #DBCAC3 section */\n#home,\n#sketch,\n#task2,\n#task4 {\n  background-color: #DBCAC3 !important;\n}\n\n/* web BG set for #ebe2de section */\n#timeline,\n#task1,\n#task3,\n#team {\n  background-color: #ebe2de !important;\n}\n\n      /* TabsetPanel  */\n      .nav-tabs .nav-link {\n        color: #000 !important;\n        background-color: #bda59f !important;\n      }\n      .nav-tabs .nav-item.show .nav-link,\n      .nav-tabs .nav-link.active {\n        color: #000 !important;\n        background-color: #bda59f !important;\n      }\n\n      /* Dropdown box color matching */\n      .form-control.shiny-bound-input,\n      .selectize-control.single .selectize-input {\n        background-color: #bda59f !important;\n        color: #000 !important;\n        border-color: #bda59f !important;\n      }\n      .selectize-dropdown {\n        background-color: #bda59f !important;\n        color: #000 !important;\n      }\n\n      /* dateRangeInput bg & text */\n      #date_range .form-control {\n        background-color: #bda59f !important;\n        color: #000 !important;\n        border-color: #bda59f !important;\n      }\n      #date_range .input-group-text {\n        background-color: #bda59f !important;\n        color: #000 !important;\n        border-color: #bda59f !important;page\n      }\n    \"))\n  ),\n  \n  # Navbar\n  tags$nav(class = \"navbar navbar-expand-lg navbar-covert fixed-top\",\n           tags$div(class = \"container-fluid\",\n                    tags$a(class = \"navbar-brand text-white\", href = \"#home\",\n                           tags$span(\"COVERT REEF \"), tags$span(\"\\U0001FAB8\", style = \"font-size:24px;\")\n                    ),\n                    tags$button(class = \"navbar-toggler\", type = \"button\",\n                                `data-bs-toggle` = \"collapse\", `data-bs-target` = \"#menuCovert\",\n                                tags$span(class = \"navbar-toggler-icon\")\n                    ),\n                    tags$div(class = \"collapse navbar-collapse\", id = \"menuCovert\",\n                             tags$ul(class = \"navbar-nav ms-auto\",\n                                     tags$li(class = \"nav-item\", tags$a(class = \"nav-link\", href = \"#home\",     \"Home\")),\n                                     tags$li(class = \"nav-item\", tags$a(class = \"nav-link\", href = \"#timeline\",\"Timeline\")),\n                                     tags$li(class=  \"nav-item\", tags$a(class=\"nav-link\", href=\"#sketch\", \"UI Sketch\")),\n                                     tags$li(class = \"nav-item\", tags$a(class = \"nav-link\", href = \"#task1\",   \"Task 1\")),\n                                     tags$li(class = \"nav-item\", tags$a(class = \"nav-link\", href = \"#task2\",   \"Task 2\")),\n                                     tags$li(class = \"nav-item\", tags$a(class = \"nav-link\", href = \"#task3\",   \"Task 3\")),\n                                     tags$li(class = \"nav-item\", tags$a(class = \"nav-link\", href = \"#task4\",   \"Task 4\")),\n                                     tags$li(class = \"nav-item\", tags$a(class = \"nav-link\", href = \"#team\",    \"Team\"))\n                             )\n                    )\n           )\n  ),\n  \n  # Home Section\n  tags$section(id=\"home\", fluidRow(column(12,\n                                          h1(\"Project Introduction\"),\n                                          p(\"Clepper, a lead investigator on Oceanus, has been closely monitoring the closure of Nemo Reef. Over the span of two weeks, he and his intern listened to and analyzed radio communications and utilized his investigative tools to uncover a complex web of expedited approvals, hidden communication, and secretive logistics. Their investigation revealed a story involving high-level Oceanus officials, Sailor Shift’s team, local influential families, and the Green Guardians, who are a local conservationist group, pointing towards possibilities of corruption and manipulation. Amidst this investigation, Nadia Conti, a known figure formerly entangled in illegal fishing operations, has resurfaced as a person of interest. The project aims to develop new and novel visual analytics techniques to support Clepper’s investigation in uncovering the full extent of the events on Oceanus.\"),\n                                          h3(\"Objectives\"),\n                                          tags$ul(\n                                            tags$li(\"Identifying daily temporal patterns in communication to detect recurring message timings.\n\n\"),\n                                            tags$li(\"Analysing the shifts in communication patterns across the two weeks.\n\n\"),\n                                            tags$li(\"Focus on specific entities to determine influence within the network.\"),\n                                            tags$li(\"Visualising the interactions between people and vessels to explore the interactions and relationships in the knowledge graph\"),\n                                            tags$li(\"Applying community detection to uncover groups that are closely associated with the community and the topic areas predominant for each group.\"),\n                                            tags$li(\"Detecting which person or vessel is using pseudonyms and unraveling them.\n\n\"),\n                                            tags$li(\"Identifying common entities in the knowledge graph.\"),\n                                            tags$li(\"Understanding of the activities by unraveling pseudonyms and tracking their interactions.\"),\n                                            tags$li(\"Providing evidence through visual analytics to determine whether Nadia Conti is engaging in illicit activity.\"),\n                                            tags$li(\"Presenting a summary of Nadia’s actions and visual reasoning behind any suspicion.\")\n                                          )\n  ))),\n  \n  # Timeline Section\n  tags$section(id=\"timeline\", fluidRow(column(12,\n                                              h2(\"Project Timeline\"),\n                                              plotOutput(\"timeline_plot\", height=\"400px\")\n  ))),\n  \n  # UI Sketch\n  tags$section(id=\"sketch\", fluidRow(column(12,\n                                            h2(\"UI Sketch\"),\n                                            img(src=\"sketch.jpg\", alt=\"UI Sketch\",\n                                                style=\"max-width:60%; border:1px solid #ccc;\")\n  ))),\n  \n  # — Task 1 —\n  tags$section(id=\"task1\", fluidRow(column(12,\n                                           h2(\"Task 1: Interactive Visual Analytics\"),\n                                           tabsetPanel(id=\"task1_tabs\", type=\"tabs\",\n                                                       \n                                                       tabPanel(\"1.1 Daily Patterns\",\n                                                                fluidRow(\n                                                                  column(4, dateRangeInput(\"date_range\",\"Select date range:\", start=NULL, end=NULL)),\n                                                                  column(4, sliderInput(\"hour_range\",\"Select hour range:\",0,23,c(0,23),step=1))\n                                                                ),\n                                                                plotOutput(\"heatmap\", height=\"600px\")\n                                                       ),\n                                                       \n                                                       tabPanel(\"1.2 Week Comparison\",\n                                                                fluidRow(\n                                                                  column(4, checkboxGroupInput(\"weeks\",\"Select Week:\",c(\"Week 1\",\"Week 2\"),c(\"Week 1\",\"Week 2\"))),\n                                                                  column(4, sliderInput(\"hour_range2\",\"Hourly interval:\",0,23,c(0,23),step=1))\n                                                                ),\n                                                                plotOutput(\"week_plot\", height=\"450px\")\n                                                       ),\n                                                       \n                                                       tabPanel(\"1.3 Influence Analysis\",\n                                                                fluidRow(\n                                                                  column(6,\n                                                                         selectInput(\"subtype\",\"Select subtype:\",choices=NULL),\n                                                                         plotlyOutput(\"inf_plot\", height=\"600px\")\n                                                                  ),\n                                                                  column(6,\n                                                                         selectInput(\"target\",\"Select entity:\",choices=NULL),\n                                                                         plotOutput(\"net_plot\", height=\"600px\")\n                                                                  )\n                                                                )\n                                                       )\n                                                       \n                                           )\n  ))),\n  \n  # — Task 2 —\n  tags$section(id=\"task2\", fluidRow(column(12,\n                                           h2(\"Task 2: People & Vessels Analysis\"),\n                                           tabsetPanel(id=\"task2_tabs\", type=\"tabs\",\n                                                       \n                                                       tabPanel(\"2.1 Plotted Timeline- People & Vessels\",\n                                                                plotlyOutput(\"pv_timeline\", height=\"500px\"),\n                                                                br(), verbatimTextOutput(\"task2a_findings\")\n                                                       ),\n                                                       \n                                                       # inside your tabsetPanel(id=\"task2_tabs\", type=\"tabs\", …)\n                                                       tabPanel(\"2.2 Communities Detection\",\n                                                                \n                                                                # 1) Community Detection (static)\n                                                                fluidRow(\n                                                                  column(12, h4(\" Community Detection – People & Vessels\")),\n                                                                  column(12, plotOutput(\"comm_graph\", height = \"450px\"))\n                                                                ),\n                                                                \n                                                                # 2) PageRank PageRank bar + network\n                                                                fluidRow(\n                                                                  column(6,\n                                                                         h4(\"PageRank Centrality (Top 10 Nodes)\"),\n                                                                         plotOutput(\"pr_bar\", height = \"350px\")\n                                                                  ),\n                                                                  column(6,\n                                                                         h4(\"PageRank‐Sized Network\"),\n                                                                         plotOutput(\"pr_graph\", height = \"350px\")\n                                                                  )\n                                                                ),\n                                                                h5(\" Findings\"),\n                                                                verbatimTextOutput(\"task2b_pr_findings\"),\n                                                                \n                                                                # 4) Membership summary (white background)\n                                                                fluidRow(\n                                                                  column(12, h4(\"Community Group Membership – Top 5\")),\n                                                                  column(12,\n                                                                         div(style=\"background:white; padding:8px;\",\n                                                                             tableOutput(\"comm_membership\")\n                                                                         )\n                                                                  )\n                                                                ),\n                                                                \n                                                                # 5) Interactive community timeline\n                                                                fluidRow(\n                                                                  column(12, h4(\"Plotted Community Timeline\")),\n                                                                  column(12, plotlyOutput(\"comm_timeline\", height = \"450px\"))\n                                                                ),\n                                                                \n                                                                # 6) Discussion\n                                                                h5(\"Discussion / Interpretation\"),\n                                                                verbatimTextOutput(\"task2b_discussion\")\n                                                       )\n                                                       \n                                                       \n                                           )\n  ))),\n  \n  # — Task 3: Pseudonym Identification —\n  tags$section(id=\"task3\", fluidRow(\n    column(12,\n           h2(\"Task 3: Pseudonym Identification\"),\n           tabsetPanel(id=\"task3_tabs\", type=\"tabs\",\n                       \n                       # 3.1: Rules & Table\n                       tabPanel(\"3.1 Rules & Table\",\n                                h4(\"Rules to identify pseudonyms:\"),\n                                tags$ul(\n                                  tags$li(\"Names starting with “The ” are likely pseudonyms.\"),\n                                  tags$li(\"Names containing keywords: Boss, Accountant, Middleman, Lookout, Intern, Money, Fry.\")\n                                ),\n                                tableOutput(\"pseudo_table\")\n                       ),\n                       \n                       # 3.2: Pseudonym Network\n                       tabPanel(\"3.2 Pseudonym Network\",\n                                visNetworkOutput(\"pseudonym_net\", height = \"500px\")\n                       ),\n                       \n                       # 3.3: Conclusion\n                       tabPanel(\"3.3 Conclusion\",\n                                verbatimTextOutput(\"task3_conclusion\")\n                       )\n                       \n           )\n    )\n  )),\n  \n\n  \n\n  ## — Task 4: Nadia Conti Investigation —\n  ## ——————— UI ————————\n  tags$section(id=\"task4\", fluidRow(\n    column(12,\n           h2(\"Task 4: Nadia Conti Investigation\"),\n           tabsetPanel(id=\"task4_tabs\", type=\"tabs\",\n                       \n                       # 4.1 Evidence (5 steps) —\n                       tabPanel(\"4.1 Evidence\",\n                                tabsetPanel(type=\"tabs\",\n                                            \n                                            # 1) 8.1 Nadia’s Ego Network (1-hop Louvain)\n                                            tabPanel(\"8.1 Ego (1-hop)\",\n                                                     plotOutput(\"nadia_ego_1hop\", height=\"400px\")\n                                            ),\n                                            \n                                            # 2) 8.2 Sent vs Received Comms Nets\n                                            tabPanel(\"8.2 Comms Nets\",\n                                                     fluidRow(\n                                                       column(6,\n                                                              h4(\"8.2.2.1 Sent Communications Network\"),\n                                                              visNetworkOutput(\"nadia_sent_net\", height=\"350px\")\n                                                       ),\n                                                       column(6,\n                                                              h4(\"8.2.2.2 Received Communications Network\"),\n                                                              visNetworkOutput(\"nadia_recv_net\", height=\"350px\")\n                                                       )\n                                                     )\n                                            ),\n                                            \n                                            # 3) Findings\n                                            tabPanel(\"Findings\",\n                                                     verbatimTextOutput(\"task4_1_findings\")\n                                            ),\n                                            \n                                            # 4) 8.3 Nadia’s 2-Hop Ego (Degree Centrality)\n                                            tabPanel(\"8.3 Ego (2-hop)\",\n                                                     plotOutput(\"nadia_ego_2hop\", height=\"400px\")\n                                            ),\n                                            \n                                            # 5) Conclusion\n                                            tabPanel(\"Conclusion\",\n                                                     verbatimTextOutput(\"task4_1_conclusion\")\n                                            )\n                                            \n                                )\n                       ),\n                       \n                       # 4.2 Summary (2 steps) —\n                       tabPanel(\"4.2 Summary\",\n                                fluidRow(\n                                  column(6,\n                                         h4(\"8.4.2 Plotted Timeline (2-hop)\"),\n                                         plotlyOutput(\"nadia_2hop_timeline\", height=\"350px\")\n                                  ),\n                                  column(6,\n                                         h4(\"8.5.1 Ego & Comms Table\"),\n                                         DT::dataTableOutput(\"nadia_comm_table\")\n                                  )\n                                )\n                       )\n                       \n           )\n    )\n  )),\n  \n\n  \n  #Team introduction\n  tags$section(id=\"team\", fluidRow(column(12,\n                                          h2(\"Team Members\"),\n                                          tags$ul(\n                                            tags$li(\"Audrey\"),\n                                            tags$li(\"Li JianYi\"),\n                                            tags$li(\"Yang Lu\")\n                                          )\n  )))\n)\n\n\n\n\n\n\n\n\n\n# --------------------------------------------------\n# Server\n# --------------------------------------------------\nserver <- function(input, output, session) {\n  \n  # --- Task 0: Timeline ---\n  output$timeline_plot <- renderPlot({\n    data <- read.csv(text = \"\nevent,group,start,end,color\n,Project Proposal,2025-06-02,2025-06-08,#a5d6a7\n,Exploratory data analysis,2025-05-20,2025-06-08,#a5d6a7\n,Exploratory data analysis,2025-06-08,2025-06-09,#DD4B39\n,R Quarto/ Netlify,2025-05-20,2025-06-08,#a5d6a7\n,R Quarto/ Netlify,2025-06-08,2025-06-30,#DD4B39\n,R Shiny App,2025-06-15,2025-07-06,#DD4B39\n,Poster,2025-06-23,2025-06-26,#DD4B39\n,User Guide,2025-06-15,2025-06-26,#DD4B39\n\", stringsAsFactors = FALSE)\n    data <- data %>%\n      mutate(\n        start = as.POSIXct(start),\n        end   = as.POSIXct(end),\n        color = recode(color,\n                       `#a5d6a7` = \"#8979BF\",\n                       `#DD4B39` = \"#B0BF79\")\n      )\n    gg_vistime(data) +\n      geom_vline(xintercept = as.numeric(as.POSIXct(\"2025-06-08\")), color = \"red\") +\n      scale_x_datetime(date_breaks = \"3 days\", date_labels = \"%d %b\") +\n      theme_minimal(base_family = \"Rubik\") +\n      theme(axis.text.x = element_text(angle = 45, hjust = 1))\n  }, bg = \"transparent\", res = 96)\n  \n  # --- Load & preprocess for Task 1 & 2 ---\n  MC3_graph <- fromJSON(\"data/MC3_graph.json\")\n  nodes_tbl  <- as_tibble(MC3_graph$nodes)\n  edges_tbl  <- as_tibble(MC3_graph$edges)\n  \n  comm_nodes <- nodes_tbl %>%\n    filter(type==\"Event\", sub_type==\"Communication\") %>%\n    transmute(event_id=id, timestamp)\n  sent_edges <- edges_tbl %>% filter(type==\"sent\")   %>% transmute(sender=source, event_id=target)\n  recv_edges <- edges_tbl %>% filter(type==\"received\") %>% transmute(event_id=source, receiver=target)\n  \n  msgs <- sent_edges %>%\n    inner_join(recv_edges, by=\"event_id\") %>%\n    inner_join(comm_nodes, by=\"event_id\") %>%\n    mutate(\n      ts   = ymd_hms(timestamp, tz=\"UTC\"),\n      date = as_date(ts),\n      hour = hour(ts)\n    )\n \n  \n  \n  \n  \n  \n   \n  # ---- Task 1 logic ----\n  heatmap_data <- msgs %>%\n    count(date, hour) %>%\n    complete(date=seq(min(date),max(date),by=\"1 day\"),\n             hour=0:23, fill=list(n=0))\n  updateDateRangeInput(session,\"date_range\",\n                       start=min(heatmap_data$date),\n                       end  =max(heatmap_data$date))\n  \n  week_patterns <- msgs %>%\n    mutate(week=if_else(date<=min(date)+days(6),\"Week 1\",\"Week 2\")) %>%\n    count(week,hour) %>%\n    group_by(week) %>%\n    mutate(proportion=n/sum(n)) %>%\n    ungroup()\n  \n  entity_info <- nodes_tbl %>%\n    filter(type==\"Entity\") %>%\n    transmute(id, target_subtype=sub_type)\n  msgs2 <- msgs %>% left_join(entity_info, by=c(\"receiver\"=\"id\"))\n  top_inf <- msgs2 %>%\n    filter(!is.na(receiver)) %>%\n    count(target_subtype, receiver, sender, sort=TRUE) %>%\n    group_by(target_subtype, receiver) %>%\n    slice_max(n, n=10) %>%\n    ungroup()\n  subtypes <- unique(top_inf$target_subtype)\n  updateSelectInput(session,\"subtype\",\n                    choices=subtypes,\n                    selected=subtypes[1])\n  \n  ee_edges     <- msgs %>% transmute(from=sender, to=receiver)\n  entity_nodes <- nodes_tbl %>% filter(type==\"Entity\") %>% transmute(id,name)\n  g_ig         <- graph_from_data_frame(ee_edges, vertices=entity_nodes, directed=TRUE)\n  all_targets  <- sort(V(g_ig)$name)\n  updateSelectInput(session,\"target\",\n                    choices=all_targets,\n                    selected=all_targets[1])\n  \n  # 1.1 Heatmap\n  filtered_data <- reactive({\n    req(input$date_range)\n    heatmap_data %>%\n      filter(\n        date >= input$date_range[1],\n        date <= input$date_range[2],\n        hour >= input$hour_range[1],\n        hour <= input$hour_range[2]\n      )\n  })\n  output$heatmap <- renderPlot({\n    df <- filtered_data()\n    ggplot(df, aes(hour, date, fill = n)) +\n      geom_tile(color = \"white\") +\n      scale_x_continuous(breaks = seq(input$hour_range[1], input$hour_range[2], by = 1),\n                         expand = c(0,0)) +\n      scale_y_date(\n        breaks = seq(min(heatmap_data$date), max(heatmap_data$date), by = \"1 day\"),\n        date_labels = \"%b %d\",\n        expand = c(0, 0)\n      ) +\n      scale_fill_distiller(name = \"Messages\", palette = \"Spectral\", direction = 1) +\n      theme_minimal() +\n      theme(panel.grid = element_blank())\n  }, res = 96)\n  \n  \n  # 1.2 Week Comparison\n  output$week_plot <- renderPlot({\n    df <- week_patterns %>%\n      filter(week %in% input$weeks,\n             hour >= input$hour_range2[1],\n             hour <= input$hour_range2[2])\n    ggplot(df, aes(hour, proportion, color=week)) +\n      geom_line() + geom_point() +\n      scale_y_continuous(labels=percent_format()) +\n      theme_light() +\n      theme(legend.position=\"top\")\n  })\n  \n  # 1.3 Influence Bar\n  output$inf_plot <- renderPlotly({\n    df <- top_inf %>%\n      filter(target_subtype == input$subtype)\n    p <- ggplot(df,\n                aes(reorder(sender, n), n,\n                    fill = receiver,\n                    text = paste0(\"Sender: \", sender, \"\\nCount: \", n))) +\n      geom_col() + coord_flip() +\n      labs(x=\"Sender\", y=\"Count\") +\n      theme_minimal()\n    ggplotly(p, tooltip=\"text\")\n  })\n  \n  # 1.3 Influence Network\n  output$net_plot <- renderPlot({\n    req(input$target)\n    root <- which(V(g_ig)$name == input$target)\n    vids <- unique(c(\n      root,\n      neighbors(g_ig, root, mode=\"in\"),\n      neighbors(g_ig, root, mode=\"out\")\n    ))\n    subg <- induced_subgraph(g_ig, vids)\n    ggraph(subg, layout=\"kk\") +\n      geom_edge_link(color=\"grey70\") +\n      geom_node_point(aes(filter=(name==input$target)),\n                      color=\"firebrick\", size=6) +\n      geom_node_point(aes(filter=(name!=input$target)),\n                      color=\"steelblue\", size=4) +\n      geom_node_text(aes(label=name),\n                     repel=TRUE, size=3) +\n      theme_void()\n  })\n  \n  # ---- Task 2 prep ----\n  g_undir <- as_undirected(g_ig, mode=\"collapse\")\n  \n  comm_obj <- reactive({ cluster_walktrap(g_undir) })\n  \n  # Shared timeline reactive\n  entity_meta <- nodes_tbl %>%\n    filter(type==\"Entity\") %>%\n    transmute(id,name,sub_type)\n  timeline_df <- reactive({\n    msgs %>%\n      left_join(entity_meta, by=c(\"sender\"=\"id\")) %>%\n      filter(sub_type %in% c(\"Person\",\"Vessel\")) %>%\n      mutate(Type=sub_type)\n  })\n  \n  # 2.a Interactive Timeline\n  output$pv_timeline <- renderPlotly({\n    df <- timeline_df()\n    p <- ggplot(df,\n                aes(date, hour,\n                    color = name,\n                    shape = Type,\n                    text  = paste(name, Type, hour))) +\n      geom_point(size=3, alpha=0.8) +\n      facet_wrap(~Type, ncol=1) +\n      scale_shape_manual(values=c(Person=16, Vessel=17)) +\n      labs(x=\"Date\", y=\"Time of Day\", color=\"Sender\") +\n      theme_minimal()\n    ggplotly(p, tooltip=\"text\")\n  })\n  output$task2a_findings <- renderText({\n    \"Findings on People/ Vessels:\nCore logic:\n\n-If two names appear as sender and recipient in the same message, they cannot belong to the same person — i.e., they’re not aliases of each other.\n\n-If two names sent a message at the exact time, they cannot belong to the same person.\n\n-For instance, if Nadia sent a message to The Accountant, they would not be the same individual. If Nadia sent a message at 10am to The Accountant and The Lookout also sent a message at 10am to The Intern, Nadia and The Lookout cannot be the same person.\n\nSelect only The Accountant, Mrs. Money, Elise: We see close timings between Mrs. Money and Elise on 8 Oct, and 10 Oct. These were on the same topic. Elise then disappears from radar on 10 Oct. She reappears as The Accountant and Mrs. Money on 11 Oct on the same topic and remains only as The Accountant till 14 Oct.\nSelect only Liam and The Middleman: The Middleman disappeared on 7 Oct and appeared as Liam on 8 Oct. On 11 Oct Mrs. Money asked The Middleman if anything was found by conservation vessels. On the same day, Liam reappeared and replied Elise that nothing was found by them.\n\nSelect only The Boss and Nadia: The Boss disappeared on 5 Oct and reappeared as Nadia on 8 Oct. Likely the same person.\n\nSelect only Small Fry and Rodriguez: on 2 Oct Rodriguez corresponded with Remora and Mako on meeting at the slip #14. It happened again on 14 Oct as he took on dual roles and responded to the same message with different names. Likely the same person.\n\nSelect only The Lookout and Sam: on 7 Oct Sam asked Kelly to get information on who authorized the permit. 2 minutes later, The Lookout (Kelly) responded to The Intern (Sam), that it was signed by Jensen from City Council.\n\nSeawatch only appeared on 10 Oct but Horizon talked to Seawatch on 8 Oct. Therefore, some other entity is Seawatch before or during 8 Oct. Defender told Seawatch on 3 Oct at 8.39am that it increased its patrol and informed Seawatch to maintain vigilance. The Lookout (Seawatch) responded to Sentinel (Defender) at 8.41am that it acknowledged the need for vigilance.\n\n        \"\n  })\n  \n  # 2.b Static Community Detection\n  output$comm_net_static <- renderPlot({\n    mem <- membership(comm_obj())\n    ggraph(g_undir, layout=\"kk\") +\n      geom_edge_link(color=\"grey80\", alpha=0.5) +\n      geom_node_point(aes(color=factor(mem[name])), size=4) +\n      geom_node_text(aes(label=name, color=factor(mem[name])),\n                     repel=TRUE, size=3) +\n      scale_color_manual(values=c(\"1\"=\"#E41A1C\",\"2\"=\"#377EB8\",\n                                  \"3\"=\"#4DAF4A\",\"4\"=\"#984EA3\",\"5\"=\"#FF7F00\")) +\n      labs(color=\"Community\") +\n      theme_void()\n  })\n  \n  # --- Before these outputs, define a shared reactive timeline_df() ---\n  timeline_df <- reactive({\n    msgs %>%\n      left_join(\n        nodes_tbl %>% filter(type==\"Entity\") %>% transmute(id,name,sub_type),\n        by = c(\"sender\" = \"id\")\n      ) %>%\n      filter(sub_type %in% c(\"Person\",\"Vessel\")) %>%\n      mutate(Type = sub_type)\n  })\n  \n  # 1) Static community‐detection plot\n  output$comm_graph <- renderPlot({\n    com  <- cluster_louvain(as.undirected(g_ig, mode=\"collapse\"))\n    mem  <- membership(com)\n    ggraph(as.undirected(g_ig,mode=\"collapse\"), layout=\"kk\") +\n      geom_edge_link(color=\"grey80\", alpha=0.5) +\n      geom_node_point(aes(color=factor(mem[name])), size=4) +\n      geom_node_text(aes(label=name, color=factor(mem[name])),\n                     repel=TRUE, size=3) +\n      scale_color_manual(values=c(\"1\"=\"#E41A1C\",\"2\"=\"#377EB8\",\"3\"=\"#4DAF4A\",\n                                  \"4\"=\"#984EA3\",\"5\"=\"#FF7F00\")) +\n      theme_void()\n  })\n  \n  # precompute PageRank\n  pr_vals <- page_rank(as.undirected(g_ig,mode=\"collapse\"))$vector\n  \n  # 2a) Bar chart of top PageRank nodes\n  output$pr_bar <- renderPlot({\n    pr_df <- tibble(\n      name     = V(g_ig)$name,\n      pagerank = pr_vals\n    ) %>%\n      arrange(desc(pagerank)) %>%\n      slice_head(n=10)\n    \n    ggplot(pr_df, aes(reorder(name, pagerank), pagerank)) +\n      geom_col(fill=\"#377EB8\") +\n      coord_flip() +\n      labs(x=\"Node\", y=\"PageRank\", title=\"Top 10 by PageRank\") +\n      theme_minimal(base_size=12)\n  })\n  \n  # 2b) Static network sized by PageRank\n  output$pr_graph <- renderPlot({\n    mem <- membership(cluster_louvain(as.undirected(g_ig,mode=\"collapse\")))\n    ggraph(as.undirected(g_ig,mode=\"collapse\"), layout=\"kk\") +\n      geom_edge_link(color=\"grey80\", alpha=0.5) +\n      geom_node_point(aes(size=pr_vals, color=factor(mem[name])), show.legend=\"point\") +\n      geom_node_text(aes(label=name, color=factor(mem[name])),\n                     repel=TRUE, size=3) +\n      scale_size(range=c(2,8), name=\"PageRank\") +\n      scale_color_manual(values=c(\"1\"=\"#E41A1C\",\"2\"=\"#377EB8\",\"3\"=\"#4DAF4A\",\n                                  \"4\"=\"#984EA3\",\"5\"=\"#FF7F00\")) +\n      theme_void()\n  })\n  \n  # 3) Findings for PageRank step\n  output$task2b_pr_findings <- renderText({\n    \"Findings:\n- There were 5 closely associated groups. Community 5 (Clepper and Miranda) appeared to be segmented from the central group, due to the non-involvement from the nature of their investigative work.\nFrom the graph, we extracted the 8 influential nodes to focus on:\nCommunity 1: Mako\nCommunity 2: Neptune, Remora, Nadia, Davis\nCommunity 3: N/A as they were not very influential at global level\nCommunity 4: Mrs. Money, Boss, The Middleman\nCommunity 5: N/A as they were not very influential at global level\nCommunity 6: N/A as they were not very influential at global level\"\n  })\n  \n  # 4) Membership & top topics (top 5 groups)\n  output$comm_membership <- renderTable({\n    com   <- cluster_louvain(as.undirected(g_ig,mode=\"collapse\"))\n    mem   <- membership(com)\n    # build membership + topics as before\n    mem_df <- tibble(name=names(mem), community=mem)\n    part   <- edges_tbl %>%\n      filter(type %in% c(\"sent\",\"received\")) %>%\n      mutate(entity = ifelse(type==\"sent\", source, target),\n             event  = ifelse(type==\"sent\", target, source)) %>%\n      select(entity, event)\n    about  <- edges_tbl %>% filter(type==\"about\") %>% transmute(event=source, topic=target)\n    topics <- nodes_tbl %>% filter(type==\"Topic\") %>% transmute(id, topic_name=name)\n    \n    joined <- part %>%\n      inner_join(about, by=\"event\") %>%\n      inner_join(topics, by=c(\"topic\"=\"id\")) %>%\n      left_join(mem_df, by=c(\"entity\"=\"name\"))\n    \n    top_topics <- joined %>%\n      count(community, topic_name, name=\"n\") %>%\n      group_by(community) %>%\n      slice_max(n, n=3) %>%\n      summarise(predominant = paste(topic_name, collapse=\", \"))\n    \n    members <- mem_df %>%\n      group_by(community) %>%\n      summarise(Members=paste(name, collapse=\", \"))\n    \n    out <- members %>%\n      left_join(top_topics, by=\"community\") %>%\n      rename(Group=community) %>%\n      arrange(Group) %>%\n      slice_head(n=5)\n    \n    out\n  }, bordered=TRUE, spacing=\"xs\")\n  \n\n  \n  # 6) Interactive community timeline\n  output$comm_timeline <- renderPlotly({\n    # reuse timeline_df() defined above Task 2.a\n    df <- timeline_df() %>%\n      left_join(tibble(name=names(membership(cluster_louvain(as.undirected(g_ig,mode=\"collapse\")))),\n                       community=membership(cluster_louvain(as.undirected(g_ig,mode=\"collapse\")))),\n                by=\"name\")\n    p <- ggplot(df, aes(date, hour, color=factor(community), shape=Type,\n                        text=paste(name, \"Grp\", community, hour))) +\n      geom_point(size=3, alpha=0.8) +\n      facet_wrap(~Type, ncol=1) +\n      scale_shape_manual(values=c(Person=16, Vessel=17)) +\n      labs(x=\"Date\", y=\"Time of Day\", color=\"Community\") +\n      theme_minimal()\n    ggplotly(p, tooltip=\"text\")\n  })\n  \n  # 7) Discussion / Interpretation\n  output$task2b_discussion <- renderText({\n    \"Discussion:\nWe mainly focused on the conversations by 8 influential nodes and some related nodes:\nConservation Group (Comm.1): Samantha Blake informed Mako to stop operations on 8 and 10th Oct. Serenity is a private luxury yacht. Osprey was likely a tourism vessel looking for charter from Mako for their tourists.\n\nPermit (Comm. 2): Neptune, Remora, Nadia, and Davis were working on Nemo Reef operation. This referred to the Music Video Production for Sailor Shift on 14 Oct.\n\nPseudonym (Comm. 3): Other than communicating among themselves, The Lookout appeared to have also externally corresponded with Sentinel, Reef Guardian and Horizon (conservation based topics), while The Intern also externally corresponded with Mrs. Money.\n\nSuspicious (Comm. 4): The Middleman had access to Council documents. Mrs. Money had funding from sources that would not flag out to regulators for her operations. Mrs. Money was investigating V. Miesel’s structures. On 5 Oct, Boss told Mrs. Money to disguise financial trails through tourism ventures and destroy evidence of Nemo Reef operations.\n\nHacklee Herald (Comm. 5): Conversations between Clepper and his intern Miranda which ended on 11 Oct. Miranda mentioned an Oceanus City Council Member meeting with unmarked vessels at night.\"\n  })\n  \n  \n  # --- Task 3: rule-based pseudonym detection ----\n  \n  # 3.1 Build the pseudo table\n  nodes_person <- nodes_tbl %>%\n    filter(sub_type == \"Person\") %>%\n    transmute(id, label = name, sub_type)\n  \n  pseudonym_keywords <- c(\"Boss\", \"Accountant\", \"Middleman\", \"Lookout\",\n                          \"Intern\", \"Money\", \"Fry\")\n  \n  pseudo_df <- nodes_person %>%\n    mutate(\n      is_prefix   = str_detect(label, \"^The \"),\n      is_keyword  = str_detect(label, paste(pseudonym_keywords, collapse = \"|\")),\n      is_pseudonym = is_prefix | is_keyword\n    ) %>%\n    filter(is_pseudonym) %>%\n    select(id, label, sub_type)\n  \n  output$pseudo_table <- renderTable({\n    pseudo_df\n  }, striped = TRUE, bordered = TRUE)\n  \n  # 3.2 Build & render the pseudonym-only communication network\n  pseudo_labels <- pseudo_df$label\n  \n  pv_nodes <- data.frame(id = pseudo_labels, label = pseudo_labels)\n  \n  pv_edges <- msgs %>%\n    # attach sender label\n    left_join(nodes_tbl %>% transmute(id, label = name),\n              by = c(\"sender\" = \"id\")) %>%\n    rename(from = label) %>%\n    # attach receiver label\n    left_join(nodes_tbl %>% transmute(id, label = name),\n              by = c(\"receiver\" = \"id\")) %>%\n    rename(to = label) %>%\n    filter(from %in% pseudo_labels, to %in% pseudo_labels) %>%\n    distinct(from, to)\n  \n  output$pseudonym_net <- renderVisNetwork({\n    visNetwork(pv_nodes, pv_edges) %>%\n      visIgraphLayout(layout = \"layout_with_fr\") %>%\n      visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE)\n  })\n  \n  # 3.3 Conclusion\n  output$task3_conclusion <- renderText({\n    paste(\n      \"→ Identified pseudonyms:\",\n      paste(pseudo_df$label, collapse = \", \"),\n      \"\",\n      \"With the explicit identification of pseudonyms such as “Boss,” “The Intern,” “The Accountant,” “Mrs. Money,” “The Middleman,” “The Lookout,” and “Small Fry,” my understanding of the activities within the Oceanus network changed significantly.\",\n      \"Initially, communications and relationships appeared to be fragmented among many individuals and vessels. However, after mapping pseudonyms onto the network, several important patterns emerged:\",\n      \"\",\n      \"-Pseudonyms as Key Hubs: In the visual network, the detected pseudonyms are not peripheral actors—they consistently occupy central hub positions, connecting to multiple vessels and people through various types of relationships (such as “Reports,” “Coordinates,” “Operates,” and “Suspicious”).\",\n      \"-Obscured True Roles: What previously looked like many unrelated participants was actually a small set of influential actors operating under multiple pseudonyms. For example, “The Intern” and “Boss” are both connected to several vessels via “Coordinates” and “Operates” relationships, indicating they may be orchestrating or managing operations behind the scenes.).\",\n      \"-Concealment of Illicit Activity: The structure revealed that pseudonyms are often used to mask direct links between real individuals and vessels—particularly in suspicious or high-frequency communication events. This suggests intentional obfuscation, possibly to hide illicit coordination or the flow of sensitive information.)\",\n      \"-Redefining Influence and Risk: By highlighting pseudonyms, it becomes clear that influence within the network is far more centralized than the real-name view suggested. A few pseudonyms control or interact with a large proportion of vessels and people, making them high-value targets for further investigation.\",\n      sep = \"\\n\")\n  })\n  \n \n  # --- Task 4: Nadia Conti Investigation ---\n  \n  ## ——————— SERVER ———————\n  \n  # 4.0 Nadia’s node ID\n  nadia_id <- nodes_tbl %>% filter(name == \"Nadia Conti\") %>% pull(id)\n  \n  # — 4.1.1 Nadia’s 1-Hop Ego Network (Louvain) —\n  ego1 <- make_ego_graph(as.undirected(g_ig, mode=\"collapse\"),\n                         order = 1,\n                         nodes = which(V(g_ig)$name == \"Nadia Conti\"))[[1]]\n  com1 <- cluster_louvain(ego1)\n  mem1 <- membership(com1)\n  \n  output$nadia_ego_1hop <- renderPlot({\n    ggraph(ego1, layout=\"kk\") +\n      geom_edge_link(color=\"grey80\", alpha=0.5) +\n      geom_node_point(aes(color = factor(mem1)), size=5) +\n      geom_node_text(aes(label = name, color = factor(mem1)),\n                     repel=TRUE) +\n      labs(title = \"Nadia’s 1-Hop Ego Network\", color = \"Comm\") +\n      theme_void()\n  })\n  \n  # — 4.1.2 Sent vs Received Communications Networks —\n  \n  # prepare sent edges/nodes\n  sent_edges1 <- msgs %>%\n    filter(sender == nadia_id) %>%\n    left_join(nodes_tbl %>% transmute(id, label = name),\n              by = c(\"sender\" = \"id\")) %>% rename(from = label) %>%\n    left_join(nodes_tbl %>% transmute(id, label = name),\n              by = c(\"receiver\" = \"id\")) %>% rename(to = label) %>%\n    distinct(from, to)\n  sent_nodes1 <- tibble(id = unique(c(sent_edges1$from, sent_edges1$to)),\n                        label = id)\n  \n  output$nadia_sent_net <- renderVisNetwork({\n    g_sent <- graph_from_data_frame(sent_edges1,\n                                    vertices = sent_nodes1,\n                                    directed = TRUE)\n    visIgraph(g_sent, layout = \"layout_with_fr\") %>%\n      visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE)\n  })\n  \n  # prepare received edges/nodes\n  recv_edges1 <- msgs %>%\n    filter(receiver == nadia_id) %>%\n    left_join(nodes_tbl %>% transmute(id, label = name),\n              by = c(\"sender\" = \"id\")) %>% rename(from = label) %>%\n    left_join(nodes_tbl %>% transmute(id, label = name),\n              by = c(\"receiver\" = \"id\")) %>% rename(to = label) %>%\n    distinct(from, to)\n  recv_nodes1 <- tibble(id = unique(c(recv_edges1$from, recv_edges1$to)),\n                        label = id)\n  \n  output$nadia_recv_net <- renderVisNetwork({\n    g_recv <- graph_from_data_frame(recv_edges1,\n                                    vertices = recv_nodes1,\n                                    directed = TRUE)\n    visIgraph(g_recv, layout = \"layout_with_fr\") %>%\n      visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE)\n  })\n  \n  # — 4.1.3 Findings —\n  output$task4_1_findings <- renderText({\n    paste0(\n      \"Nodes involved: Nadia, Davis, Elise, Haacklee Harbor, Liam, Marlin,\\n\",\n      \"Neptune, Oceanus City Council, Remora, Rodriguez,\\n\",\n      \"Sailor Shifts Team, Sentinel, V. Miesel Shipping.\\n\\n\",\n      \"• Sent more direct communications to Liam (2) and Neptune (2).\\n\",\n      \"• Received more communications from Davis (5), Elise (3), Liam (2).\\n\\n\",\n      \"Next step: drill into suspicious chars/activities.\"\n    )\n  })\n  \n  # — 4.1.4 Nadia’s 2-Hop Ego (Degree Centrality) —\n  ego2 <- make_ego_graph(as.undirected(g_ig, mode=\"collapse\"),\n                         order = 2,\n                         nodes = which(V(g_ig)$name == \"Nadia Conti\"))[[1]]\n  deg2 <- degree(ego2)\n  deg2_df <- tibble(name = names(deg2), degree = deg2)\n  \n  output$nadia_ego_2hop <- renderPlot({\n    ggplot(deg2_df, aes(reorder(name, degree), degree)) +\n      geom_col() +\n      coord_flip() +\n      labs(title = \"Nadia’s 2-Hop Ego (Degree Centrality)\",\n           x = \"Node\", y = \"Degree\") +\n      theme_minimal()\n  })\n  \n  # — 4.1.5 Conclusion —\n  output$task4_1_conclusion <- renderText({\n    paste0(\n      \"1-Hop nodes: Nadia, Davis, Elise, Haacklee Harbor, Liam, Marlin,\\n\",\n      \"Neptune, Oceanus City Council, Remora, Rodriguez,\\n\",\n      \"Sailor Shifts Team, Sentinel, V. Miesel Shipping.\\n\\n\",\n      \"2-Hop additions: EcoVigil, Sam, The Accountant, Nemo Reef.\\n\\n\",\n      \"Use these 2-hop nodes to drill deeper for suspicious links.\"\n    )\n  })\n  \n  # — 4.2.1 Plotted Timeline for all 2-Hop actors —\n  hop2_names <- V(ego2)$name\n  id_map    <- nodes_tbl %>% filter(name %in% hop2_names) %>% transmute(id, name)\n  timeline2 <- msgs %>%\n    filter(sender %in% id_map$id | receiver %in% id_map$id) %>%\n    mutate(Actor = if_else(sender %in% id_map$id,\n                           id_map$name[match(sender, id_map$id)],\n                           id_map$name[match(receiver, id_map$id)]))\n  \n  output$nadia_2hop_timeline <- renderPlotly({\n    p <- ggplot(timeline2, aes(date, hour, color = Actor,\n                               text = paste0(Actor, \"\\n\", format(ts, \"%Y-%m-%d %H:%M\")))) +\n      geom_point(size = 3, alpha = 0.8) +\n      labs(x = \"Date\", y = \"Hour\", color = \"Actor\") +\n      theme_minimal()\n    ggplotly(p, tooltip = \"text\")\n  })\n  \n  # — 4.2.2 Ego & Comms Table for 2-Hop actors —\n  comm2_table <- timeline2 %>%\n    transmute(\n      Date     = as.character(date),\n      Time     = format(ts, \"%H:%M\"),\n      Sender   = nodes_tbl$name[match(sender, nodes_tbl$id)],\n      Receiver = nodes_tbl$name[match(receiver, nodes_tbl$id)],\n      EventID  = event_id\n    )\n  \n  output$nadia_comm_table <- DT::renderDataTable({\n    DT::datatable(comm2_table,\n                  options = list(pageLength = 10, autoWidth = TRUE),\n                  rownames = FALSE)\n  })\n  \n  \n  \n  \n  \n}\n\n\nshinyApp(ui, server)\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}