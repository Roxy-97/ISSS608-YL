[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS608-YL",
    "section": "",
    "text": "Welcome to ISSS608 Visual Analytics and Application. In this website, you will find my coursework prepared for this course."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Hands-on_EX/Hands-on_Ex01/Hands-on_Ex01.html",
    "href": "Hands-on_EX/Hands-on_Ex01/Hands-on_Ex01.html",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "The code chunk below use p_load() of pacman package to check if tidyverse packages are installed in the computer. If they are , then they will be launched into R\n\npacman::p_load(tidyverse)\n\n\n\n\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_EX/Hands-on_Ex01/Hands-on_Ex01.html#installing-and-launching-r-packages",
    "href": "Hands-on_EX/Hands-on_Ex01/Hands-on_Ex01.html#installing-and-launching-r-packages",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "The code chunk below use p_load() of pacman package to check if tidyverse packages are installed in the computer. If they are , then they will be launched into R\n\npacman::p_load(tidyverse)"
  },
  {
    "objectID": "Hands-on_EX/Hands-on_Ex01/Hands-on_Ex01.html#importing-the-data",
    "href": "Hands-on_EX/Hands-on_Ex01/Hands-on_Ex01.html#importing-the-data",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "exam_data &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_EX/Hands-on_Ex01/Hands-on_Ex01.html#changing-binbinwith-size",
    "href": "Hands-on_EX/Hands-on_Ex01/Hands-on_Ex01.html#changing-binbinwith-size",
    "title": "Hands-on Exercise 1",
    "section": "Changing bin/binwith size",
    "text": "Changing bin/binwith size\n\nggplot(data=exam_data,\n       aes(x=MATHS)) +\n  geom_dotplot(dotsize=0.5)"
  },
  {
    "objectID": "Hands-on_EX/Hands-on_Ex01/Hands-on_Ex01.html#y-axis-is-not-very-useful-using-scale_y_continuous-to-hide",
    "href": "Hands-on_EX/Hands-on_Ex01/Hands-on_Ex01.html#y-axis-is-not-very-useful-using-scale_y_continuous-to-hide",
    "title": "Hands-on Exercise 1",
    "section": "Y-axis is not very useful, using scale_y_continuous() to hide",
    "text": "Y-axis is not very useful, using scale_y_continuous() to hide\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(binwidth=2.5,    #group scores into bins that are 2.5 units wide\n               dotsize = 0.5) +      #dotsize=0.5 is half of default size\n   scale_y_continuous(NULL,  #Hide the y-axis title\n                     breaks = NULL)   #Hide Y-axis scales"
  },
  {
    "objectID": "Hands-on_EX/Hands-on_Ex01/Hands-on_Ex01.html#add-means-value-by-stat_summary-geom-method",
    "href": "Hands-on_EX/Hands-on_Ex01/Hands-on_Ex01.html#add-means-value-by-stat_summary-geom-method",
    "title": "Hands-on Exercise 1",
    "section": "Add means value by stat_summary() / geom() method",
    "text": "Add means value by stat_summary() / geom() method\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  stat_summary(geom = \"point\",       \n               fun = \"mean\",         \n               colour =\"red\",        \n               size=4)               \n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  geom_point(stat=\"summary\",    #draw it as a dot     \n             fun=\"mean\",        #the value shown is the mean  \n             colour=\"red\",       # the dot colour   \n             size=4)          # the dot size"
  },
  {
    "objectID": "Hands-on_EX/Hands-on_Ex01/Hands-on_Ex01.html#using-notch-to-visually-compare-the-media",
    "href": "Hands-on_EX/Hands-on_Ex01/Hands-on_Ex01.html#using-notch-to-visually-compare-the-media",
    "title": "Hands-on Exercise 1",
    "section": "Using notch to visually compare the media",
    "text": "Using notch to visually compare the media\n\nif not overlap, means the medians are significantly different\nif overlap, means the difference between medians may not be statistically significant\n\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot(notch=TRUE)"
  },
  {
    "objectID": "Hands-on_EX/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2",
    "href": "Hands-on_EX/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2",
    "title": "Hands-on Exercise 1",
    "section": "Essential Grammatical Elements in ggplot2:",
    "text": "Essential Grammatical Elements in ggplot2:\n\nstat stat_() function and override the default geom\ngeom_() function and override the default stat"
  },
  {
    "objectID": "Hands-on_EX/Hands-on_Ex01/Hands-on_Ex01.html#working-with-facet_wrap",
    "href": "Hands-on_EX/Hands-on_Ex01/Hands-on_Ex01.html#working-with-facet_wrap",
    "title": "Hands-on Exercise 1",
    "section": "Working with facet_wrap() :",
    "text": "Working with facet_wrap() :\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_wrap(~ CLASS)"
  },
  {
    "objectID": "Hands-on_EX/Hands-on_Ex01/Hands-on_Ex01.html#working-with-facet_grid",
    "href": "Hands-on_EX/Hands-on_Ex01/Hands-on_Ex01.html#working-with-facet_grid",
    "title": "Hands-on Exercise 1",
    "section": "Working with facet_grid()",
    "text": "Working with facet_grid()\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_grid(~ CLASS)"
  },
  {
    "objectID": "Hands-on_EX/Hands-on_Ex01/Hands-on_Ex01.html#for-vertical-version",
    "href": "Hands-on_EX/Hands-on_Ex01/Hands-on_Ex01.html#for-vertical-version",
    "title": "Hands-on Exercise 1",
    "section": "For vertical version",
    "text": "For vertical version\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()"
  },
  {
    "objectID": "Hands-on_EX/Hands-on_Ex01/Hands-on_Ex01.html#using-coord_filp-change-to-horizontal-version",
    "href": "Hands-on_EX/Hands-on_Ex01/Hands-on_Ex01.html#using-coord_filp-change-to-horizontal-version",
    "title": "Hands-on Exercise 1",
    "section": "Using coord_filp() change to horizontal version",
    "text": "Using coord_filp() change to horizontal version\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip()"
  },
  {
    "objectID": "Hands-on_EX/Hands-on_Ex02/Hands-on_Ex02.html",
    "href": "Hands-on_EX/Hands-on_Ex02/Hands-on_Ex02.html",
    "title": "Hands-on Exercise 2",
    "section": "",
    "text": "ggplot2 Extensions for Enhanced Graphics\nggrepel: Helps control the placement of text labels to avoid overlap, making annotations clearer.\nggthemes & hrbrthemes: Provide professional and publication-ready themes to enhance the visual appeal of your plots.\npatchwork: Allows to easily combine multiple ggplot2 graphs into composite figures for clearer storytelling.\n\n\n\n\n\n\npacman::p_load(tidyverse)\n\n\npacman::p_load(ggrepel, patchwork, \n               ggthemes, hrbrthemes,\n               tidyverse) \n\n\n\n\n\nexam_data &lt;- read_csv(\"Exam_data.csv\")\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label(aes(label = ID), \n             hjust = .5, \n             vjust = -.5) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label_repel(aes(label = ID), \n                   fontface = \"bold\") +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nThemes\n\ntheme_bw()theme_classic()theme_dark()theme_light()theme_linedraw()theme_minimal()theme_void()\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20,   #The data is split into 20 bars \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_bw() +\n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20,   #The data is split into 20 bars \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_classic() +\n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20,   #The data is split into 20 bars \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_dark() +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20,   #The data is split into 20 bars \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_light() +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20,   #The data is split into 20 bars \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_linedraw() +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20,   #The data is split into 20 bars \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_minimal() +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20,   #The data is split into 20 bars \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_void() +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_economist()\n\n\n\n\n\n\n\n\nIt also provides some extra geoms and scales for ‘ggplot2’. Consult this vignette to learn more.\nthis vignette\n\n\n\n\nprovides a base theme that focuses on typographic elements, including where various labels are placed as well as the fonts that are used.\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum()\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum(axis_title_size = 18,\n              base_size = 15,\n              grid = \"Y\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np1 &lt;- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") + \n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of Maths scores\")\n\nprint(p1) # the graphic save in p1, using print(p1) or directly write p1 to show \n\n\n\n\n\n\n\n\n\n\n\n\np2 &lt;- ggplot(data=exam_data, \n             aes(x = ENGLISH)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of English scores\")\nprint(p2)\n\n\n\n\n\n\n\n\n\n\n\n\np3 &lt;- ggplot(data=exam_data, \n             aes(x= MATHS, \n                 y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\np3\n\n\n\n\n\n\n\n\n\n\n\ngrid.arrange()\n\nlibrary(gridExtra) # install package\n\ngrid.arrange(p1, p2,p3,ncol=2)  \n\n\n\n\n\n\n\n\nplot_grid()\n\nlibrary(cowplot) \n\nplot_grid(p1, p2,p3)  \n\n\n\n\n\n\n\n\n\n\n\n\np1+p2\n\n\n\n\n\n\n\n\n\n\n\n\n“/” operator to stack two ggplot2 graphs\n“|” operator to place the plots beside each other\n“()” operator the define the sequence of the plotting.\n\n\nlibrary(patchwork)\n(p1/p2) | p3\n\n\n\n\n\n\n\n\n\n\n\n\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'I')\n\n\n\n\n\n\n\n\n\n\n\ninset_element()\n\np3 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 1)\n\n\n\n\n\n\n\n\nInsert two elements\n\np3 +\n  inset_element(p1,\n                left = 0.05, bottom = 0.55,\n                right = 0.45, top = 0.95) +\n  inset_element(p2,\n                left = 0.55, bottom = 0.05,\n                right = 0.95, top = 0.45)\n\n\n\n\n\n\n\n\n\n\n\n\npatchwork &lt;- (p1 / p2) | p3 \npatchwork & theme_economist()"
  },
  {
    "objectID": "Hands-on_EX/Hands-on_Ex02/Hands-on_Ex02.html#installing-and-loading-all-required-libraries",
    "href": "Hands-on_EX/Hands-on_Ex02/Hands-on_Ex02.html#installing-and-loading-all-required-libraries",
    "title": "Hands-on Exercise 2",
    "section": "",
    "text": "pacman::p_load(tidyverse)\n\n\npacman::p_load(ggrepel, patchwork, \n               ggthemes, hrbrthemes,\n               tidyverse)"
  },
  {
    "objectID": "Hands-on_EX/Hands-on_Ex02/Hands-on_Ex02.html#importing-data",
    "href": "Hands-on_EX/Hands-on_Ex02/Hands-on_Ex02.html#importing-data",
    "title": "Hands-on Exercise 2",
    "section": "",
    "text": "exam_data &lt;- read_csv(\"Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Hands-on_EX/Hands-on_Ex02/Hands-on_Ex02.html#working-with-ggtheme-package",
    "href": "Hands-on_EX/Hands-on_Ex02/Hands-on_Ex02.html#working-with-ggtheme-package",
    "title": "Hands-on Exercise 2",
    "section": "2.4.1 Working with ggtheme package",
    "text": "2.4.1 Working with ggtheme package\n\nUsing Economist theme\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_economist()\n\n\n\n\n\n\n\n\nIt also provides some extra geoms and scales for ‘ggplot2’. Consult this vignette to learn more.\nthis vignette"
  },
  {
    "objectID": "Hands-on_EX/Hands-on_Ex02/Hands-on_Ex02.html#working-with-hrbthems-package",
    "href": "Hands-on_EX/Hands-on_Ex02/Hands-on_Ex02.html#working-with-hrbthems-package",
    "title": "Hands-on Exercise 2",
    "section": "2.4.2 Working with hrbthems package",
    "text": "2.4.2 Working with hrbthems package\nprovides a base theme that focuses on typographic elements, including where various labels are placed as well as the fonts that are used.\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum()\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum(axis_title_size = 18,\n              base_size = 15,\n              grid = \"Y\")\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database"
  },
  {
    "objectID": "Hands-on_EX/Hands-on_Ex02/Hands-on_Ex02.html#creating-composite-graphics-pathwork-methods",
    "href": "Hands-on_EX/Hands-on_Ex02/Hands-on_Ex02.html#creating-composite-graphics-pathwork-methods",
    "title": "Hands-on Exercise 2",
    "section": "2.5.1 Creating Composite Graphics: pathwork methods",
    "text": "2.5.1 Creating Composite Graphics: pathwork methods\ngrid.arrange()\n\nlibrary(gridExtra) # install package\n\n\nAttaching package: 'gridExtra'\n\n\nThe following object is masked from 'package:dplyr':\n\n    combine\n\ngrid.arrange(p1, p2,p3,ncol=2)  \n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\nplot_grid()\n\nlibrary(cowplot) \n\n\nAttaching package: 'cowplot'\n\n\nThe following object is masked from 'package:ggthemes':\n\n    theme_map\n\n\nThe following object is masked from 'package:patchwork':\n\n    align_plots\n\n\nThe following object is masked from 'package:lubridate':\n\n    stamp\n\nplot_grid(p1, p2,p3)  \n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "Hands-on_EX/Hands-on_Ex02/Hands-on_Ex02.html#for-combining-two-ggplot2-graphs---using-plus-sign",
    "href": "Hands-on_EX/Hands-on_Ex02/Hands-on_Ex02.html#for-combining-two-ggplot2-graphs---using-plus-sign",
    "title": "Hands-on Exercise 2",
    "section": "2.5.2 For combining two ggplot2 graphs - using plus sign+",
    "text": "2.5.2 For combining two ggplot2 graphs - using plus sign+\n\np1+p2"
  },
  {
    "objectID": "Hands-on_EX/Hands-on_Ex02/Hands-on_Ex02.html#combining-three-ggplot2-graphs",
    "href": "Hands-on_EX/Hands-on_Ex02/Hands-on_Ex02.html#combining-three-ggplot2-graphs",
    "title": "Hands-on Exercise 2",
    "section": "2.5.3 Combining three ggplot2 graphs",
    "text": "2.5.3 Combining three ggplot2 graphs\n\n“/” operator to stack two ggplot2 graphs\n“|” operator to place the plots beside each other\n“()” operator the define the sequence of the plotting.\n\n\nlibrary(patchwork)\n(p1/p2) | p3\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "Hands-on_EX/Hands-on_Ex02/Hands-on_Ex02.html#creating-a-composite-figure-with-tag",
    "href": "Hands-on_EX/Hands-on_Ex02/Hands-on_Ex02.html#creating-a-composite-figure-with-tag",
    "title": "Hands-on Exercise 2",
    "section": "2.5.4 Creating a composite figure with tag",
    "text": "2.5.4 Creating a composite figure with tag\n\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'I')\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "Hands-on_EX/Hands-on_Ex02/Hands-on_Ex02.html#creating-figure-with-insert---using-inset_element",
    "href": "Hands-on_EX/Hands-on_Ex02/Hands-on_Ex02.html#creating-figure-with-insert---using-inset_element",
    "title": "Hands-on Exercise 2",
    "section": "2.5.5 Creating figure with insert - using inset_element()",
    "text": "2.5.5 Creating figure with insert - using inset_element()\ninset_element()\n\np3 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 1)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\nInsert two elements\n\np3 +\n  inset_element(p1,\n                left = 0.05, bottom = 0.55,\n                right = 0.45, top = 0.95) +\n  inset_element(p2,\n                left = 0.55, bottom = 0.05,\n                right = 0.95, top = 0.45)\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "Hands-on_EX/Hands-on_Ex02/Hands-on_Ex02.html#creating-a-composite-figure-by-using-patchwork-and-ggtheme",
    "href": "Hands-on_EX/Hands-on_Ex02/Hands-on_Ex02.html#creating-a-composite-figure-by-using-patchwork-and-ggtheme",
    "title": "Hands-on Exercise 2",
    "section": "2.5.6 Creating a composite figure by using patchwork and ggtheme",
    "text": "2.5.6 Creating a composite figure by using patchwork and ggtheme\n\npatchwork &lt;- (p1 / p2) | p3\npatchwork & theme_economist()\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "Hands-on_EX/Hands-on_Ex02/Hands-on_Ex02.html#overview",
    "href": "Hands-on_EX/Hands-on_Ex02/Hands-on_Ex02.html#overview",
    "title": "Hands-on Exercise 2",
    "section": "",
    "text": "ggplot2 Extensions for Enhanced Graphics\nggrepel: Helps control the placement of text labels to avoid overlap, making annotations clearer.\nggthemes & hrbrthemes: Provide professional and publication-ready themes to enhance the visual appeal of your plots.\npatchwork: Allows to easily combine multiple ggplot2 graphs into composite figures for clearer storytelling."
  },
  {
    "objectID": "Hands-on_EX/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-annotation-ggrepel",
    "href": "Hands-on_EX/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-annotation-ggrepel",
    "title": "Hands-on Exercise 2",
    "section": "",
    "text": "ggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label(aes(label = ID), \n             hjust = .5, \n             vjust = -.5) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label_repel(aes(label = ID), \n                   fontface = \"bold\") +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")"
  },
  {
    "objectID": "Hands-on_EX/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-themes",
    "href": "Hands-on_EX/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-themes",
    "title": "Hands-on Exercise 2",
    "section": "",
    "text": "Themes\n\ntheme_bw()theme_classic()theme_dark()theme_light()theme_linedraw()theme_minimal()theme_void()\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20,   #The data is split into 20 bars \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_bw() +\n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20,   #The data is split into 20 bars \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_classic() +\n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20,   #The data is split into 20 bars \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_dark() +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20,   #The data is split into 20 bars \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_light() +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20,   #The data is split into 20 bars \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_linedraw() +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20,   #The data is split into 20 bars \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_minimal() +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20,   #The data is split into 20 bars \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_void() +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_economist()\n\n\n\n\n\n\n\n\nIt also provides some extra geoms and scales for ‘ggplot2’. Consult this vignette to learn more.\nthis vignette\n\n\n\n\nprovides a base theme that focuses on typographic elements, including where various labels are placed as well as the fonts that are used.\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum()\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum(axis_title_size = 18,\n              base_size = 15,\n              grid = \"Y\")"
  },
  {
    "objectID": "Hands-on_EX/Hands-on_Ex02/Hands-on_Ex02.html#beyond-single-graph",
    "href": "Hands-on_EX/Hands-on_Ex02/Hands-on_Ex02.html#beyond-single-graph",
    "title": "Hands-on Exercise 2",
    "section": "",
    "text": "p1 &lt;- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") + \n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of Maths scores\")\n\nprint(p1) # the graphic save in p1, using print(p1) or directly write p1 to show \n\n\n\n\n\n\n\n\n\n\n\n\np2 &lt;- ggplot(data=exam_data, \n             aes(x = ENGLISH)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of English scores\")\nprint(p2)\n\n\n\n\n\n\n\n\n\n\n\n\np3 &lt;- ggplot(data=exam_data, \n             aes(x= MATHS, \n                 y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\np3\n\n\n\n\n\n\n\n\n\n\n\ngrid.arrange()\n\nlibrary(gridExtra) # install package\n\ngrid.arrange(p1, p2,p3,ncol=2)  \n\n\n\n\n\n\n\n\nplot_grid()\n\nlibrary(cowplot) \n\nplot_grid(p1, p2,p3)  \n\n\n\n\n\n\n\n\n\n\n\n\np1+p2\n\n\n\n\n\n\n\n\n\n\n\n\n“/” operator to stack two ggplot2 graphs\n“|” operator to place the plots beside each other\n“()” operator the define the sequence of the plotting.\n\n\nlibrary(patchwork)\n(p1/p2) | p3\n\n\n\n\n\n\n\n\n\n\n\n\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'I')\n\n\n\n\n\n\n\n\n\n\n\ninset_element()\n\np3 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 1)\n\n\n\n\n\n\n\n\nInsert two elements\n\np3 +\n  inset_element(p1,\n                left = 0.05, bottom = 0.55,\n                right = 0.45, top = 0.95) +\n  inset_element(p2,\n                left = 0.55, bottom = 0.05,\n                right = 0.95, top = 0.45)\n\n\n\n\n\n\n\n\n\n\n\n\npatchwork &lt;- (p1 / p2) | p3 \npatchwork & theme_economist()"
  },
  {
    "objectID": "Hands-on_EX/Hands-on_Ex02/Hands-on_Ex02.html#getting-started",
    "href": "Hands-on_EX/Hands-on_Ex02/Hands-on_Ex02.html#getting-started",
    "title": "Hands-on Exercise 2",
    "section": "",
    "text": "pacman::p_load(tidyverse)\n\n\npacman::p_load(ggrepel, patchwork, \n               ggthemes, hrbrthemes,\n               tidyverse) \n\n\n\n\n\nexam_data &lt;- read_csv(\"Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_EX/Hands-on_Ex03/Hands-on_Ex03.html",
    "href": "Hands-on_EX/Hands-on_Ex03/Hands-on_Ex03.html",
    "title": "Hands-on Exercise 3A",
    "section": "",
    "text": "learning objective: learning how to create interactive data visualisation using functions provided by ggiraph and plotlyrpackages.\n\n\n\nInstall the R packages\n\npacman::p_load(ggiraph, plotly, \n               patchwork, DT, tidyverse) \n\n\n\n\n\nexam_data &lt;- read_csv(\"Exam_data.csv\")\n\n\n\n\nInteractive is made with ggplot geometries that can understand three arguments:\n\nTooltip: a column of data-sets that contain tooltips to be displayed when the mouse is over elements.\nOnclick: a column of data-sets that contain a JavaScript function to be executed when elements are clicked.\nData_id: a column of data-sets that contain an id to be associated with elements.\n\n\n\nfor displaying the single information on tooltip\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),  \n#means that when you mouse over a dot, its ID value pops up in a little bubble.\n    stackgroups = TRUE, #stack dots with the same x-value vertically, avoid overlap\n    binwidth = 1,       # group x-values into bins of width 1\n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\ngirafe(       # turns your ggplot into an HTML/SVG widget with built-in JavaScript.\n  ggobj = p,  # the ggplot objective\n  width_svg = 6,  # output width in inches\n  height_svg = 6*0.618 # output height using the golden ratio \n)\n\n\n\n\n\nthe code chunk consists to two parts :\nFirst, an interactive version of ggplot2 geom (i.e. geom_dotplot_interactive()) will be used to create the basic graph.\nThen, girafe() will be used to generate an svg object to be displayed on an HTML page.\n\n\n\n\nBy hovering the mouse pointer on an data point of interest, the student’s ID will be displayed.\n\n\n\nexam_data$tooltip &lt;- c(paste0(     # create new field called \"tooltip\" in exam_data which included ID and Class \n  \"Name = \", exam_data$ID,    # using paste0() to combine ID and class in 2 lines  \n  \"\\n Class = \", exam_data$CLASS))   \n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip), #, using newly field as tooltip field \n    stackgroups = TRUE,  # same point fraction are stacked vertically \n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)  #hiding y-axis\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618\n)\n\n\n\n\n\n\n\n\n\nThe student’s ID and Class will be displayed by hovering the mouse pointer on an interesting data point.\n\n\nreferring to Customizing girafe animations to get more customise ggiraph objects.\nuses opts_tooltip(using to standardize all the tooltip）of ggiraph to customize tooltip rendering by adding css declarations.\n\ntooltip_css &lt;- \"background-color:white; font-style:bold; color:black;\"\n\n#set up the tooltip's BG is white, fontsize is bold and black colour\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = ID),                   \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(    #&lt;&lt;\n    opts_tooltip(    #&lt;&lt;   \n      css = tooltip_css)) #&lt;&lt;  #Apply the CSS defined in step 1 to all tooltip.\n)                                        \n\n\n\n\n\n\n\n\nIn this example, a function is used to compute 90% confident interval of the mean\n\ntooltip &lt;- function(y, ymax, accuracy = .01) {  # using function to define function\n  mean &lt;- scales::number(y, accuracy = accuracy) # Formatting “mean” as a string\n  sem &lt;- scales::number(ymax - y, accuracy = accuracy) # calculate \"sem\" as ymax – y, and format it.\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem) #combine tgt, and the string “Mean maths scores: 75.00 +/- 2.50” \n}\n\ngg_point &lt;- ggplot(data=exam_data, \n                   aes(x = RACE),\n) +\n  stat_summary(aes(y = MATHS, #Interactive columns: use ggiraph’s GeomInteractiveCol\n                   tooltip = after_stat(tooltip(y, ymax))),# call tooltip() to show mean ± SE on tooltip\n    fun.data = \"mean_se\", #calculate mean and \"sem\" for each group\n    geom = GeomInteractiveCol,  \n    fill = \"light blue\"\n  ) +\n  stat_summary(aes(y = MATHS),  # Add error bars on top of each column\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, size = 0.2\n  )\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)\n\n\n\n\n\n\n\n\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(           \n    aes(data_id = CLASS),             \n    stackgroups = TRUE,               \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618                      \n)                                        \n\n\n\n\n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\nNote that the default value of the hover css is hover_css = “fill:orange;”\n\n\n\ncss codes are used to change the highlighting effect.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"), #change hovered element's in #202020 colour\n    opts_hover_inv(css = \"opacity:0.2;\") # for non-hovered element , semi-transparent\n  )                                        \n)                                        \n\n\n\n\n\n\n\n\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS, \n        data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                        \n\n\n\n\n\n\n\n\n\nexam_data$onclick &lt;- sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID))\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(onclick = onclick),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618)                                        \n\n\n\n\n\n\n\n\nwhen a data point of one of the dotplot is selected, the corresponding data point ID on the second data visualisation will be highlighted too.\n\np1 &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\np2 &lt;- ggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(code = print(p1 + p2), \n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         )\n       ) \n\n\n\n\n\n\n\n\n\n\nThere are two ways to create interactive graph by using plotly, they are:\n\nby using plot_ly()\nby using ggplotly()\n\n\n\n\nplot_ly(data = exam_data, \n             x = ~MATHS, \n             y = ~ENGLISH)\n\n\n\n\n\n\n\n\n\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~RACE)\n\n\n\n\n\n\n\n\n\np &lt;- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nggplotly(p)\n\n\n\n\n\n\n\n\nusing highlight_key() of plotly package is used as shared data. subplot() of plotly package is used to place them next to each other side-by-side\n\nd &lt;- highlight_key(exam_data)\np1 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nsubplot(ggplotly(p1),\n        ggplotly(p2))\n\n\n\n\n\n\n\n\n\nCrosstalk is an add-on to the htmlwidgets package. It extends htmlwidgets with a set of classes, functions, and conventions for implementing cross-widget interactions (currently, linked brushing and filtering).\n\n\n\nDT::datatable(exam_data, class= \"compact\")\n\n\n\n\n\n\n\n\n\nd &lt;- highlight_key(exam_data) \np &lt;- ggplot(d, \n            aes(ENGLISH, \n                MATHS)) + \n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\ngg &lt;- highlight(ggplotly(p),        \n                \"plotly_selected\")  \n\ncrosstalk::bscols(gg,               \n                  DT::datatable(d), \n                  widths = 5)        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThis link provides online version of the reference guide and several useful articles. Use this link to download the pdf version of the reference guide.\n\nHow to Plot With Ggiraph\nInteractive map of France with ggiraph\nCustom interactive sunbursts with ggplot in R\nThis link provides code example on how ggiraph is used to interactive graphs for Swiss Olympians - the solo specialists.\n\n\n\n\n\nGetting Started with Plotly in R\nA collection of plotly R graphs are available via this link.\nCarson Sievert (2020) Interactive web-based data visualization with R, plotly, and shiny, Chapman and Hall/CRC is the best resource to learn plotly for R. The online version is available via this link\nPlotly R Figure Reference provides a comprehensive discussion of each visual representations.\nPlotly R Library Fundamentals is a good place to learn the fundamental features of Plotly’s R API.\nGetting Started\nVisit this link for a very interesting implementation of gganimate by your senior.\nBuilding an animation step-by-step with gganimate.\nCreating a composite gif with multiple gganimate panels"
  },
  {
    "objectID": "Hands-on_EX/Hands-on_Ex03/Hands-on_Ex03.html#learning-outcome",
    "href": "Hands-on_EX/Hands-on_Ex03/Hands-on_Ex03.html#learning-outcome",
    "title": "Hands-on Exercise 3A",
    "section": "",
    "text": "learning objective: learning how to create interactive data visualisation using functions provided by ggiraph and plotlyrpackages."
  },
  {
    "objectID": "Hands-on_EX/Hands-on_Ex03/Hands-on_Ex03.html#getting-started",
    "href": "Hands-on_EX/Hands-on_Ex03/Hands-on_Ex03.html#getting-started",
    "title": "Hands-on Exercise 3A",
    "section": "",
    "text": "Install the R packages\n\npacman::p_load(ggiraph, plotly, \n               patchwork, DT, tidyverse)"
  },
  {
    "objectID": "Hands-on_EX/Hands-on_Ex03/Hands-on_Ex03.html#importing-data",
    "href": "Hands-on_EX/Hands-on_Ex03/Hands-on_Ex03.html#importing-data",
    "title": "Hands-on Exercise 3A",
    "section": "",
    "text": "exam_data &lt;- read_csv(\"Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_EX/Hands-on_Ex03/Hands-on_Ex03.html#interactive-data-visualisation---ggiraph-methods",
    "href": "Hands-on_EX/Hands-on_Ex03/Hands-on_Ex03.html#interactive-data-visualisation---ggiraph-methods",
    "title": "Hands-on Exercise 3A",
    "section": "",
    "text": "Interactive is made with ggplot geometries that can understand three arguments:\n\nTooltip: a column of data-sets that contain tooltips to be displayed when the mouse is over elements.\nOnclick: a column of data-sets that contain a JavaScript function to be executed when elements are clicked.\nData_id: a column of data-sets that contain an id to be associated with elements.\n\n\n\nfor displaying the single information on tooltip\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),  \n#means that when you mouse over a dot, its ID value pops up in a little bubble.\n    stackgroups = TRUE, #stack dots with the same x-value vertically, avoid overlap\n    binwidth = 1,       # group x-values into bins of width 1\n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\ngirafe(       # turns your ggplot into an HTML/SVG widget with built-in JavaScript.\n  ggobj = p,  # the ggplot objective\n  width_svg = 6,  # output width in inches\n  height_svg = 6*0.618 # output height using the golden ratio \n)\n\n\n\n\n\nthe code chunk consists to two parts :\nFirst, an interactive version of ggplot2 geom (i.e. geom_dotplot_interactive()) will be used to create the basic graph.\nThen, girafe() will be used to generate an svg object to be displayed on an HTML page."
  },
  {
    "objectID": "Hands-on_EX/Hands-on_Ex03/Hands-on_Ex03.html#interactivity",
    "href": "Hands-on_EX/Hands-on_Ex03/Hands-on_Ex03.html#interactivity",
    "title": "Hands-on Exercise 3A",
    "section": "",
    "text": "By hovering the mouse pointer on an data point of interest, the student’s ID will be displayed.\n\n\n\nexam_data$tooltip &lt;- c(paste0(     # create new field called \"tooltip\" in exam_data which included ID and Class \n  \"Name = \", exam_data$ID,    # using paste0() to combine ID and class in 2 lines  \n  \"\\n Class = \", exam_data$CLASS))   \n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip), #, using newly field as tooltip field \n    stackgroups = TRUE,  # same point fraction are stacked vertically \n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)  #hiding y-axis\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618\n)"
  },
  {
    "objectID": "Hands-on_EX/Hands-on_Ex03/Hands-on_Ex03.html#interactivity-1",
    "href": "Hands-on_EX/Hands-on_Ex03/Hands-on_Ex03.html#interactivity-1",
    "title": "Hands-on Exercise 3A",
    "section": "",
    "text": "The student’s ID and Class will be displayed by hovering the mouse pointer on an interesting data point.\n\n\nreferring to Customizing girafe animations to get more customise ggiraph objects.\nuses opts_tooltip(using to standardize all the tooltip）of ggiraph to customize tooltip rendering by adding css declarations.\n\ntooltip_css &lt;- \"background-color:white; font-style:bold; color:black;\"\n\n#set up the tooltip's BG is white, fontsize is bold and black colour\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = ID),                   \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(    #&lt;&lt;\n    opts_tooltip(    #&lt;&lt;   \n      css = tooltip_css)) #&lt;&lt;  #Apply the CSS defined in step 1 to all tooltip.\n)                                        \n\n\n\n\n\n\n\n\nIn this example, a function is used to compute 90% confident interval of the mean\n\ntooltip &lt;- function(y, ymax, accuracy = .01) {  # using function to define function\n  mean &lt;- scales::number(y, accuracy = accuracy) # Formatting “mean” as a string\n  sem &lt;- scales::number(ymax - y, accuracy = accuracy) # calculate \"sem\" as ymax – y, and format it.\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem) #combine tgt, and the string “Mean maths scores: 75.00 +/- 2.50” \n}\n\ngg_point &lt;- ggplot(data=exam_data, \n                   aes(x = RACE),\n) +\n  stat_summary(aes(y = MATHS, #Interactive columns: use ggiraph’s GeomInteractiveCol\n                   tooltip = after_stat(tooltip(y, ymax))),# call tooltip() to show mean ± SE on tooltip\n    fun.data = \"mean_se\", #calculate mean and \"sem\" for each group\n    geom = GeomInteractiveCol,  \n    fill = \"light blue\"\n  ) +\n  stat_summary(aes(y = MATHS),  # Add error bars on top of each column\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, size = 0.2\n  )\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)\n\n\n\n\n\n\n\n\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(           \n    aes(data_id = CLASS),             \n    stackgroups = TRUE,               \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618                      \n)                                        \n\n\n\n\n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\nNote that the default value of the hover css is hover_css = “fill:orange;”\n\n\n\ncss codes are used to change the highlighting effect.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"), #change hovered element's in #202020 colour\n    opts_hover_inv(css = \"opacity:0.2;\") # for non-hovered element , semi-transparent\n  )                                        \n)                                        \n\n\n\n\n\n\n\n\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS, \n        data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                        \n\n\n\n\n\n\n\n\n\nexam_data$onclick &lt;- sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID))\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(onclick = onclick),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618)                                        \n\n\n\n\n\n\n\n\nwhen a data point of one of the dotplot is selected, the corresponding data point ID on the second data visualisation will be highlighted too.\n\np1 &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\np2 &lt;- ggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(code = print(p1 + p2), \n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         )\n       )"
  },
  {
    "objectID": "Hands-on_EX/Hands-on_Ex04/Hands-on_Ex04.html",
    "href": "Hands-on_EX/Hands-on_Ex04/Hands-on_Ex04.html",
    "title": "Hands-on Exercise 3B",
    "section": "",
    "text": "When telling a visually-driven data story, animated graphics tends to attract the interest of the audience and make deeper impression than static graphics. In this hands-on exercise, will learn how to create animated data visualisation by using gganimate and plotly r packages. At the same time, you will also learn how to (i) reshape data by using tidyr package, and (ii) process, wrangle and transform data by using dplyr package.\n\n\nWhen creating animations, the plot does not actually move. Instead, many individual plots are built and then stitched together as movie frames, just like an old-school flip book or cartoon. Each frame is a different plot when conveying motion, which is built using some relevant subset of the aggregate data. The subset drives the flow of the animation when stitched back together.\n\n\n\n\nBefore we dive into the steps for creating an animated statistical graph, it’s important to understand some of the key concepts and terminology related to this type of visualization.\n\nFrame: In an animated line graph, each frame represents a different point in time or a different category. When the frame changes, the data points on the graph are updated to reflect the new data.\nAnimation Attributes: The animation attributes are the settings that control how the animation behaves. For example, you can specify the duration of each frame, the easing function used to transition between frames, and whether to start the animation from the current frame or from the beginning.\n\n\n\n\n\n\n\nFirst, write a code chunk to check, install and load the following R packages:\n\nplotly, R library for plotting interactive statistical graphs.\ngganimate, an ggplot extension for creating animated statistical graphs.\ngifski converts video frames to GIF animations using pngquant’s fancy features for efficient cross-frame palettes and temporal dithering. It produces animated GIFs that use thousands of colors per frame.\ngapminder: An excerpt of the data available at Gapminder.org. We just want to use its country_colors scheme.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\n\n\npacman::p_load(readxl, gifski, gapminder,\n               plotly, gganimate, tidyverse)\n\n\n\n\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_at(col, as.factor) %&gt;%\n  mutate(Year = as.integer(Year))\n\n\n\n\n\ngganimate extends the grammar of graphics as implemented by ggplot2 to include the description of animation. It does this by providing a range of new grammar classes that can be added to the plot object in order to customise how it should change with time.\n\ntransition_*() defines how the data should be spread out and how it relates to itself across time.\nview_*() defines how the positional scales should change along the animation.\nshadow_*() defines how data from other points in time should be presented in the given point in time.\nenter_*()/exit_*() defines how new data should appear and how old data should disappear during the course of the animation.\nease_aes() defines how different aesthetics should be eased during transitions.\n\n\n\n\nggplot(globalPop, aes(x = Old, # percent of population classified as “old” for x\n                      y = Young,# percent of population classified as “young” for y \n                      size = Population, # bubble size by total population\n                      colour = Country)) + # # bubble color by country\n  geom_point(alpha = 0.7,  # 70% opacity so overlapping bubbles remain visible\n             show.legend = FALSE) + # hide the legend for these points\n  scale_colour_manual(values = country_colors) + #Set custom colors\n  scale_size(range = c(2, 12)) + #smallest bubble has size 2 and the largest size 12\n  labs(title = 'Year: {frame_time}', #Add labels and title placeholder\n       x = '% Aged', \n       y = '% Young') \n\n\n\n\n\n\n\n\n\n\n\n\ntransition_time() of gganimate is used to create transition through distinct states in time (i.e. Year).\nease_aes() is used to control easing of aesthetics. The default is linear. Other methods are: quadratic, cubic, quartic, quintic, sine, circular, exponential, elastic, back, and bounce.\n\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') +\n  transition_time(Year) +     # Timeline by Year, one frame per year  \n  ease_aes('linear')       #transition of each visual attribute in a linear \n\n\n\n\n\n\n\n\n\n\n\n\nIn Plotly R package, both ggplotly() and plot_ly() support key frame animations through the frame argument/aesthetic. They also support an ids argument/aesthetic to ensure smooth transitions between objects with the same id (which helps facilitate object constancy).\n\n\nIn this sub-section, you will learn how to create an animated bubble plot by using ggplotly() method.\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year), # setting frame = year\n             alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young')\nggplotly(gg) #Converting ggplot objects to Plotly animations\n\n\n\n\n\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young') + \n  theme(legend.position='none')\n\nggplotly(gg)\n\n\n\n\n\n4.4.2 Building an animated bubble plot: plot_ly() method\n\nbp &lt;- globalPop %&gt;%\n  plot_ly(x = ~Old, \n          y = ~Young, \n          size = ~Population, \n          color = ~Continent,\n          sizes = c(2, 100),\n          frame = ~Year, \n          text = ~Country, \n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers'\n          ) %&gt;%\n  layout(showlegend = FALSE)\nbp\n\n\n\n\n\n\n\n\n\n\nGetting Started\nVisit this link for a very interesting implementation of gganimate by your senior.\nBuilding an animation step-by-step with gganimate.\nCreating a composite gif with multiple gganimate panels"
  },
  {
    "objectID": "Hands-on_EX/Hands-on_Ex04/Hands-on_Ex04.html#overview",
    "href": "Hands-on_EX/Hands-on_Ex04/Hands-on_Ex04.html#overview",
    "title": "Hands-on Exercise 3B",
    "section": "",
    "text": "When telling a visually-driven data story, animated graphics tends to attract the interest of the audience and make deeper impression than static graphics. In this hands-on exercise, will learn how to create animated data visualisation by using gganimate and plotly r packages. At the same time, you will also learn how to (i) reshape data by using tidyr package, and (ii) process, wrangle and transform data by using dplyr package.\n\n\nWhen creating animations, the plot does not actually move. Instead, many individual plots are built and then stitched together as movie frames, just like an old-school flip book or cartoon. Each frame is a different plot when conveying motion, which is built using some relevant subset of the aggregate data. The subset drives the flow of the animation when stitched back together.\n\n\n\n\nBefore we dive into the steps for creating an animated statistical graph, it’s important to understand some of the key concepts and terminology related to this type of visualization.\n\nFrame: In an animated line graph, each frame represents a different point in time or a different category. When the frame changes, the data points on the graph are updated to reflect the new data.\nAnimation Attributes: The animation attributes are the settings that control how the animation behaves. For example, you can specify the duration of each frame, the easing function used to transition between frames, and whether to start the animation from the current frame or from the beginning."
  },
  {
    "objectID": "Hands-on_EX/Hands-on_Ex04/Hands-on_Ex04.html#getting-started",
    "href": "Hands-on_EX/Hands-on_Ex04/Hands-on_Ex04.html#getting-started",
    "title": "Hands-on Exercise 3B",
    "section": "",
    "text": "First, write a code chunk to check, install and load the following R packages:\n\nplotly, R library for plotting interactive statistical graphs.\ngganimate, an ggplot extension for creating animated statistical graphs.\ngifski converts video frames to GIF animations using pngquant’s fancy features for efficient cross-frame palettes and temporal dithering. It produces animated GIFs that use thousands of colors per frame.\ngapminder: An excerpt of the data available at Gapminder.org. We just want to use its country_colors scheme.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\n\n\npacman::p_load(readxl, gifski, gapminder,\n               plotly, gganimate, tidyverse)\n\n\n\n\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_at(col, as.factor) %&gt;%\n  mutate(Year = as.integer(Year))"
  },
  {
    "objectID": "Hands-on_EX/Hands-on_Ex04/Hands-on_Ex04.html#animated-data-visualisation-gganimate-methods",
    "href": "Hands-on_EX/Hands-on_Ex04/Hands-on_Ex04.html#animated-data-visualisation-gganimate-methods",
    "title": "Hands-on Exercise 3B",
    "section": "",
    "text": "gganimate extends the grammar of graphics as implemented by ggplot2 to include the description of animation. It does this by providing a range of new grammar classes that can be added to the plot object in order to customise how it should change with time.\n\ntransition_*() defines how the data should be spread out and how it relates to itself across time.\nview_*() defines how the positional scales should change along the animation.\nshadow_*() defines how data from other points in time should be presented in the given point in time.\nenter_*()/exit_*() defines how new data should appear and how old data should disappear during the course of the animation.\nease_aes() defines how different aesthetics should be eased during transitions.\n\n\n\n\nggplot(globalPop, aes(x = Old, # percent of population classified as “old” for x\n                      y = Young,# percent of population classified as “young” for y \n                      size = Population, # bubble size by total population\n                      colour = Country)) + # # bubble color by country\n  geom_point(alpha = 0.7,  # 70% opacity so overlapping bubbles remain visible\n             show.legend = FALSE) + # hide the legend for these points\n  scale_colour_manual(values = country_colors) + #Set custom colors\n  scale_size(range = c(2, 12)) + #smallest bubble has size 2 and the largest size 12\n  labs(title = 'Year: {frame_time}', #Add labels and title placeholder\n       x = '% Aged', \n       y = '% Young') \n\n\n\n\n\n\n\n\n\n\n\n\ntransition_time() of gganimate is used to create transition through distinct states in time (i.e. Year).\nease_aes() is used to control easing of aesthetics. The default is linear. Other methods are: quadratic, cubic, quartic, quintic, sine, circular, exponential, elastic, back, and bounce.\n\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') +\n  transition_time(Year) +     # Timeline by Year, one frame per year  \n  ease_aes('linear')       #transition of each visual attribute in a linear"
  },
  {
    "objectID": "Hands-on_EX/Hands-on_Ex04/Hands-on_Ex04.html#animated-data-visualisation-plotly",
    "href": "Hands-on_EX/Hands-on_Ex04/Hands-on_Ex04.html#animated-data-visualisation-plotly",
    "title": "Hands-on Exercise 3B",
    "section": "",
    "text": "In Plotly R package, both ggplotly() and plot_ly() support key frame animations through the frame argument/aesthetic. They also support an ids argument/aesthetic to ensure smooth transitions between objects with the same id (which helps facilitate object constancy).\n\n\nIn this sub-section, you will learn how to create an animated bubble plot by using ggplotly() method.\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year), # setting frame = year\n             alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young')\nggplotly(gg) #Converting ggplot objects to Plotly animations\n\n\n\n\n\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young') + \n  theme(legend.position='none')\n\nggplotly(gg)\n\n\n\n\n\n4.4.2 Building an animated bubble plot: plot_ly() method\n\nbp &lt;- globalPop %&gt;%\n  plot_ly(x = ~Old, \n          y = ~Young, \n          size = ~Population, \n          color = ~Continent,\n          sizes = c(2, 100),\n          frame = ~Year, \n          text = ~Country, \n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers'\n          ) %&gt;%\n  layout(showlegend = FALSE)\nbp"
  },
  {
    "objectID": "Hands-on_EX/Hands-on_Ex03/Hands-on_Ex03.html#interactive-data-visualisation---plotly-methods",
    "href": "Hands-on_EX/Hands-on_Ex03/Hands-on_Ex03.html#interactive-data-visualisation---plotly-methods",
    "title": "Hands-on Exercise 3A",
    "section": "",
    "text": "There are two ways to create interactive graph by using plotly, they are:\n\nby using plot_ly()\nby using ggplotly()\n\n\n\n\nplot_ly(data = exam_data, \n             x = ~MATHS, \n             y = ~ENGLISH)\n\n\n\n\n\n\n\n\n\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~RACE)\n\n\n\n\n\n\n\n\n\np &lt;- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nggplotly(p)\n\n\n\n\n\n\n\n\nusing highlight_key() of plotly package is used as shared data. subplot() of plotly package is used to place them next to each other side-by-side\n\nd &lt;- highlight_key(exam_data)\np1 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nsubplot(ggplotly(p1),\n        ggplotly(p2))"
  },
  {
    "objectID": "Hands-on_EX/Hands-on_Ex03/Hands-on_Ex03.html#interactive-data-visualisation---crosstalk-methods",
    "href": "Hands-on_EX/Hands-on_Ex03/Hands-on_Ex03.html#interactive-data-visualisation---crosstalk-methods",
    "title": "Hands-on Exercise 3A",
    "section": "",
    "text": "Crosstalk is an add-on to the htmlwidgets package. It extends htmlwidgets with a set of classes, functions, and conventions for implementing cross-widget interactions (currently, linked brushing and filtering).\n\n\n\nDT::datatable(exam_data, class= \"compact\")\n\n\n\n\n\n\n\n\n\nd &lt;- highlight_key(exam_data) \np &lt;- ggplot(d, \n            aes(ENGLISH, \n                MATHS)) + \n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\ngg &lt;- highlight(ggplotly(p),        \n                \"plotly_selected\")  \n\ncrosstalk::bscols(gg,               \n                  DT::datatable(d), \n                  widths = 5)"
  },
  {
    "objectID": "Hands-on_EX/Hands-on_Ex03/Hands-on_Ex03.html#reference",
    "href": "Hands-on_EX/Hands-on_Ex03/Hands-on_Ex03.html#reference",
    "title": "Hands-on Exercise 3A",
    "section": "",
    "text": "This link provides online version of the reference guide and several useful articles. Use this link to download the pdf version of the reference guide.\n\nHow to Plot With Ggiraph\nInteractive map of France with ggiraph\nCustom interactive sunbursts with ggplot in R\nThis link provides code example on how ggiraph is used to interactive graphs for Swiss Olympians - the solo specialists.\n\n\n\n\n\nGetting Started with Plotly in R\nA collection of plotly R graphs are available via this link.\nCarson Sievert (2020) Interactive web-based data visualization with R, plotly, and shiny, Chapman and Hall/CRC is the best resource to learn plotly for R. The online version is available via this link\nPlotly R Figure Reference provides a comprehensive discussion of each visual representations.\nPlotly R Library Fundamentals is a good place to learn the fundamental features of Plotly’s R API.\nGetting Started\nVisit this link for a very interesting implementation of gganimate by your senior.\nBuilding an animation step-by-step with gganimate.\nCreating a composite gif with multiple gganimate panels"
  },
  {
    "objectID": "Hands-on_EX/Hands-on_Ex04/Hands-on_Ex04.html#reference",
    "href": "Hands-on_EX/Hands-on_Ex04/Hands-on_Ex04.html#reference",
    "title": "Hands-on Exercise 3B",
    "section": "",
    "text": "Getting Started\nVisit this link for a very interesting implementation of gganimate by your senior.\nBuilding an animation step-by-step with gganimate.\nCreating a composite gif with multiple gganimate panels"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#setting-the-scene",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#setting-the-scene",
    "title": "Take-home Exercise 01",
    "section": "Setting the scene",
    "text": "Setting the scene\nA local online media company that publishes daily content on digital platforms is planning to release an article on demographic structures and distribution of Singapore in 2024."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#about-data",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#about-data",
    "title": "Take-home Exercise 01",
    "section": "About Data",
    "text": "About Data\nI will use the data for this task from the Singapore Residents by Planning Area/Subzone, Single Year of Age and Sex, June 2024’ dataset, published by the Department of Statistics, Singapore (DOS)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#my-task",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#my-task",
    "title": "Take-home Exercise 01",
    "section": "My Task",
    "text": "My Task\nAs the graphical editor of the media company, my task is to design and prepare up to three data visualisations to support an upcoming article on Singapore’s demographic structure and distribution in 2024."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#getting-started",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#getting-started",
    "title": "Take-home Exercise 01",
    "section": "Getting started",
    "text": "Getting started\n\n\nLoad packages\nFirstly, write below code chunk to install and check the R packages installed.\n\ntidyverse → Core data wrangling & plotting (readr, dplyr, ggplot2, etc.)\ngapminder → Sample dataset & example pipeline for animated bubble plots.\nggiraph → Make ggplot2 charts interactive (tooltips, hover/click).\nplotly → Convert plots into fully interactive JavaScript charts.\npatchwork → Combine multiple ggplots into a single layout.\nDT → Render data frames as interactive HTML tables.\ngganimate → Animate ggplot2 visuals via transitions & easing.\ngifski → Render gganimate output as a shareable GIF file.\n\n\npacman::p_load(tidyverse,ggiraph,\n               plotly, patchwork, \n               DT,gifski,\n               gapminder,gganimate)\n\n\n\nImport data\n\npopulation_age_sex_2024 &lt;- read_csv(\"respopagesex2024/respopagesex2024.csv\")\n\n\n\nReview the dataframe’s structure\n\nglimpse(population_age_sex_2024)\n\nRows: 60,424\nColumns: 6\n$ PA   &lt;chr&gt; \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo K…\n$ SZ   &lt;chr&gt; \"Ang Mo Kio Town Centre\", \"Ang Mo Kio Town Centre\", \"Ang Mo Kio T…\n$ Age  &lt;chr&gt; \"0\", \"0\", \"1\", \"1\", \"2\", \"2\", \"3\", \"3\", \"4\", \"4\", \"5\", \"5\", \"6\", …\n$ Sex  &lt;chr&gt; \"Males\", \"Females\", \"Males\", \"Females\", \"Males\", \"Females\", \"Male…\n$ Pop  &lt;dbl&gt; 10, 10, 10, 10, 10, 10, 10, 10, 30, 10, 20, 10, 20, 30, 30, 10, 3…\n$ Time &lt;dbl&gt; 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,…\n\n\n\n\nChecking duplicate\n\npopulation_age_sex_2024[duplicated(population_age_sex_2024),]\n\n# A tibble: 0 × 6\n# ℹ 6 variables: PA &lt;chr&gt;, SZ &lt;chr&gt;, Age &lt;chr&gt;, Sex &lt;chr&gt;, Pop &lt;dbl&gt;,\n#   Time &lt;dbl&gt;"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#filtering-data-for-selected-variables",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#filtering-data-for-selected-variables",
    "title": "Take-home Exercise 01",
    "section": "Filtering data for selected variables",
    "text": "Filtering data for selected variables\n\n\n\n\n\n\n\n\nVariable Abbreviation\nVariable Term\nVariable Descrption\n\n\n\n\nPA\nPlanning Area\nThese are the main geographical divisions used for planning and census purposes in Singapore. They are delineated by the Urban Redevelopment Authority (URA).\n\n\nSZ\nSubzone\nEach planning area is further divided into subzones, which are smaller areas typically focused around a specific activity or neighborhood center. For example, within the Singapore River planning area, subzones include Boat Quay, Clarke Quay, and Robertson Quay.\n\n\nAge\nAge in years\nThe age of individuals, measured in completed years.\n\n\nSex\nGender\nBiological sex classification of the population group, recorded as “Males” or “Females.”\n\n\nPop\nPopulation count\nThe total number of individuals in each age–sex group (or area) for the given year.\n\n\nTime\nYear\nThe calendar year to which the population data refers (e.g. 2024)."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#what-is-singapores-overall-age-sex-profile-in-2024",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#what-is-singapores-overall-age-sex-profile-in-2024",
    "title": "Take-home Exercise 01",
    "section": "What is Singapore’s overall age-sex profile in 2024?",
    "text": "What is Singapore’s overall age-sex profile in 2024?\n\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(forcats)\nlibrary(scales)\nlibrary(plotly)\n\n\npop_pyramid &lt;- population_age_sex_2024 %&gt;%\n  mutate(\n    Age_num = case_when(\n      Age == \"90_and_Over\" ~ 85,\n      TRUE                 ~ as.numeric(Age)\n    )\n  ) %&gt;%\n  filter(Time == 2024, !is.na(Age_num)) %&gt;%\n  mutate(\n    AgeGroup = cut(\n      Age_num,\n      breaks = c(seq(0, 85, by = 5), Inf),\n      right = FALSE,\n      labels = paste0(seq(0, 80, by = 5), \"-\", seq(4, 84, by = 5), c(rep(\"\",17), \"+\"))\n    )\n  ) %&gt;%\n  group_by(AgeGroup, Sex) %&gt;%\n  summarise(count = sum(Pop), .groups = \"drop\") %&gt;%\n  mutate(\n    count    = ifelse(Sex == \"Males\", -count, count),\n    AgeGroup = fct_rev(AgeGroup)\n  )\n\n\nbase_plot &lt;- ggplot(pop_pyramid, \n                    aes(x = count, \n                        y = AgeGroup, \n                        fill = Sex,\n                        text = paste0(\n                          AgeGroup, \"\\n\",\n                          Sex, \": \", comma(abs(count)), \" people\"\n                        ))) +\n  geom_col(width = 0.8, colour = \"white\") +\n  scale_x_continuous(\n    breaks = pretty_breaks(n = 5),\n    labels = comma,\n    expand = expansion(mult = c(0.02, 0.02))\n  ) +\n  scale_fill_manual(values = c(\"Males\" = \"#75E6E1\", \"Females\" = \"#E6757A\")) +\n  labs(\n    title = \"Age-Sex and Population Pyramids of Singapore (2024)\",\n    x     = \"Population count\",\n    y     = \"Age group\",\n    fill  = NULL\n  ) +\n  theme_minimal(base_size = 12) +\n  theme(\n    panel.grid.major.y = element_blank(),\n    panel.grid.major.x = element_line(colour = \"#ECECEC\"),\n    axis.text.x        = element_text(margin = margin(t = 5)),\n    legend.position    = \"bottom\"\n  )\n\nggplotly(base_plot, tooltip = \"text\")\n\n\n\n\n\n::: Result Insights - The 2024 pyramid reveals a broad central bulge (ages 30–44), reflecting Singapore’s large working-age cohorts. - Child and adolescent bands (0–19) are noticeably narrower, hinting at lower birth rates in recent years. - The sex ratio is near-balanced among younger ages, tilts to a modest female surplus in middle age (35–59), and flips to a male edge in the oldest cohorts (85+). - Policy implications\n- Workforce planning should account for the sizeable mid-career population.\n- A shrinking youth base may lead to future labour shortages and calls for strategies to bolster the next generation. :::"
  }
]